
module CreusotSandbox_Gcd_LemmaPreserveCdAdd
  use prelude.Int
  let rec cfg lemma_preserve_cd_add [#"../../../../../../src/gcd.rs" 6 0 6 26] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    ensures { [#"../../../../../../src/gcd.rs" 3 0 5 85] forall d : int . forall q : int . forall p : int . d <> 0
     -> 0 <= p  -> 0 <= q  -> mod p d = 0  -> mod q d = 0  -> mod (p + q) d = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../../../../../../src/gcd.rs" 6 27 6 29] _0 <- ([#"../../../../../../src/gcd.rs" 6 27 6 29] ());
    return _0
  }
  
end
module CreusotSandbox_Gcd_LemmaPreserveCdSub
  use prelude.Int
  let rec cfg lemma_preserve_cd_sub [#"../../../../../../src/gcd.rs" 11 0 11 26] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    ensures { [#"../../../../../../src/gcd.rs" 8 0 10 86] forall d : int . forall q : int . forall p : int . d <> 0
     -> 0 <= q  -> q <= p  -> mod p d = 0  -> mod q d = 0  -> mod (p - q) d = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../../../../../../src/gcd.rs" 11 27 11 29] _0 <- ([#"../../../../../../src/gcd.rs" 11 27 11 29] ());
    return _0
  }
  
end
module CreusotSandbox_Gcd_LemmaDivisorMult
  use prelude.Int
  let rec cfg lemma_divisor_mult [#"../../../../../../src/gcd.rs" 16 0 16 23] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    ensures { [#"../../../../../../src/gcd.rs" 13 0 15 48] forall d : int . forall q : int . forall p : int . d <> 0
     -> mod q d = 0  -> mod (p * q) d = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../../../../../../src/gcd.rs" 16 24 16 26] _0 <- ([#"../../../../../../src/gcd.rs" 16 24 16 26] ());
    return _0
  }
  
end
module CreusotSandbox_Gcd_Gcd
  use prelude.UInt64
  use prelude.Borrow
  predicate invariant0 (self : borrowed uint64) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : borrowed uint64) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : borrowed uint64)
  val inv0 (_x : borrowed uint64) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed uint64 . inv0 x = true
  predicate resolve1 (self : borrowed uint64) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed uint64) : bool
    ensures { result = resolve1 self }
    
  val swap0 (x : borrowed uint64) (y : borrowed uint64) : ()
    requires {inv0 x}
    requires {inv0 y}
    ensures { [#"../../../../../../../../../creusot/creusot-contracts/src/std/mem.rs" 11 22 11 30]  ^ x =  * y }
    ensures { [#"../../../../../../../../../creusot/creusot-contracts/src/std/mem.rs" 12 22 12 30]  ^ y =  * x }
    
  use prelude.Int
  val lemma_divisor_mult0 [#"../../../../../../src/gcd.rs" 16 0 16 23] (_1 : ()) : ()
    ensures { [#"../../../../../../src/gcd.rs" 13 0 15 48] forall d : int . forall q : int . forall p : int . d <> 0
     -> mod q d = 0  -> mod (p * q) d = 0 }
    
  val lemma_preserve_cd_sub0 [#"../../../../../../src/gcd.rs" 11 0 11 26] (_1 : ()) : ()
    ensures { [#"../../../../../../src/gcd.rs" 8 0 10 86] forall d : int . forall q : int . forall p : int . d <> 0
     -> 0 <= q  -> q <= p  -> mod p d = 0  -> mod q d = 0  -> mod (p - q) d = 0 }
    
  val lemma_preserve_cd_add0 [#"../../../../../../src/gcd.rs" 6 0 6 26] (_1 : ()) : ()
    ensures { [#"../../../../../../src/gcd.rs" 3 0 5 85] forall d : int . forall q : int . forall p : int . d <> 0
     -> 0 <= p  -> 0 <= q  -> mod p d = 0  -> mod q d = 0  -> mod (p + q) d = 0 }
    
  function is_common_divisor0 [#"../../../../../../src/gcd.rs" 19 0 19 52] (a : int) (b : int) (d : int) : bool =
    [#"../../../../../../src/gcd.rs" 20 4 20 38] mod a d = 0 /\ mod b d = 0 /\ d <> 0
  val is_common_divisor0 [#"../../../../../../src/gcd.rs" 19 0 19 52] (a : int) (b : int) (d : int) : bool
    ensures { result = is_common_divisor0 a b d }
    
  use int.MinMax
  use int.MinMax
  use prelude.UInt64
  predicate resolve2 (self : uint64) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve2 (self : uint64) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 (self : (uint64, uint64)) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/resolve.rs" 17 8 17 60] resolve2 (let (a, _) = self in a) /\ resolve2 (let (_, a) = self in a)
  val resolve0 (self : (uint64, uint64)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg gcd [#"../../../../../../src/gcd.rs" 26 0 26 33] [@cfg:stackify] [@cfg:subregion_analysis] (a : uint64) (b : uint64) : uint64
    requires {[#"../../../../../../src/gcd.rs" 23 11 23 29] UInt64.to_int a <> 0 /\ UInt64.to_int b <> 0}
    ensures { [#"../../../../../../src/gcd.rs" 24 10 24 44] is_common_divisor0 (UInt64.to_int a) (UInt64.to_int b) (UInt64.to_int result) }
    ensures { [#"../../../../../../src/gcd.rs" 25 0 25 77] forall d : uint64 . is_common_divisor0 (UInt64.to_int a) (UInt64.to_int b) (UInt64.to_int d)
     -> mod (UInt64.to_int result) (UInt64.to_int d) = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint64;
  var a : uint64 = a;
  var b : uint64 = b;
  var x : uint64;
  var y : uint64;
  var _8 : (uint64, uint64);
  var _9 : bool;
  var _25 : bool;
  var _27 : ();
  var _28 : ();
  var _29 : ();
  var _39 : uint64;
  var _40 : bool;
  var _41 : ();
  var _42 : borrowed uint64;
  var _43 : borrowed uint64;
  var _44 : borrowed uint64;
  var _45 : borrowed uint64;
  {
    goto BB0
  }
  BB0 {
    [#"../../../../../../src/gcd.rs" 27 28 27 33] _9 <- a < b;
    switch (_9)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    [#"../../../../../../src/gcd.rs" 27 36 27 42] _8 <- (a, b);
    goto BB3
  }
  BB2 {
    [#"../../../../../../src/gcd.rs" 27 52 27 58] _8 <- (b, a);
    goto BB3
  }
  BB3 {
    [#"../../../../../../src/gcd.rs" 27 9 27 14] x <- (let (a, _) = _8 in a);
    [#"../../../../../../src/gcd.rs" 27 16 27 21] y <- (let (_, a) = _8 in a);
    assume { resolve0 _8 };
    assert { [@expl:assertion] [#"../../../../../../src/gcd.rs" 28 18 28 36] UInt64.to_int x = MinMax.min (UInt64.to_int a) (UInt64.to_int b) };
    assert { [@expl:assertion] [#"../../../../../../src/gcd.rs" 29 18 29 36] UInt64.to_int y = MinMax.max (UInt64.to_int a) (UInt64.to_int b) };
    goto BB4
  }
  BB4 {
    invariant { [#"../../../../../../src/gcd.rs" 31 4 31 92] forall d : int . is_common_divisor0 (UInt64.to_int x) (UInt64.to_int y) d = is_common_divisor0 (UInt64.to_int a) (UInt64.to_int b) d };
    invariant { [#"../../../../../../src/gcd.rs" 33 16 33 24] UInt64.to_int x <= UInt64.to_int y };
    invariant { [#"../../../../../../src/gcd.rs" 34 16 34 22] UInt64.to_int y > 0 };
    goto BB5
  }
  BB5 {
    [#"../../../../../../src/gcd.rs" 35 10 35 16] _25 <- x <> ([#"../../../../../../src/gcd.rs" 35 15 35 16] (0 : uint64));
    switch (_25)
      | False -> goto BB12
      | True -> goto BB6
      end
  }
  BB6 {
    [#"../../../../../../src/gcd.rs" 36 8 36 31] _27 <- ([#"../../../../../../src/gcd.rs" 36 8 36 31] lemma_preserve_cd_add0 ([#"../../../../../../src/gcd.rs" 36 8 36 31] ()));
    goto BB7
  }
  BB7 {
    [#"../../../../../../src/gcd.rs" 37 8 37 31] _28 <- ([#"../../../../../../src/gcd.rs" 37 8 37 31] lemma_preserve_cd_sub0 ([#"../../../../../../src/gcd.rs" 37 8 37 31] ()));
    goto BB8
  }
  BB8 {
    [#"../../../../../../src/gcd.rs" 38 8 38 28] _29 <- ([#"../../../../../../src/gcd.rs" 38 8 38 28] lemma_divisor_mult0 ([#"../../../../../../src/gcd.rs" 38 8 38 28] ()));
    goto BB9
  }
  BB9 {
    assert { [@expl:assertion] [#"../../../../../../src/gcd.rs" 40 22 40 52] UInt64.to_int y = div (UInt64.to_int y) (UInt64.to_int x) * UInt64.to_int x + mod (UInt64.to_int y) (UInt64.to_int x) };
    assert { [@expl:assertion] [#"../../../../../../src/gcd.rs" 41 8 41 87] forall d : int . is_common_divisor0 (UInt64.to_int x) (mod (UInt64.to_int y) (UInt64.to_int x)) d
     -> mod (UInt64.to_int y) d = 0 };
    assert { [@expl:assertion] [#"../../../../../../src/gcd.rs" 42 22 42 53] mod (UInt64.to_int y) (UInt64.to_int x) = UInt64.to_int y - div (UInt64.to_int y) (UInt64.to_int x) * UInt64.to_int x };
    assert { [@expl:assertion] [#"../../../../../../src/gcd.rs" 43 8 44 91] forall d : int . is_common_divisor0 (UInt64.to_int x) (UInt64.to_int y) d
     -> mod (UInt64.to_int y - div (UInt64.to_int y) (UInt64.to_int x) * UInt64.to_int x) d = 0 };
    [#"../../../../../../src/gcd.rs" 45 16 45 17] _39 <- x;
    [#"../../../../../../src/gcd.rs" 45 12 45 17] _40 <- _39 = ([#"../../../../../../src/gcd.rs" 45 12 45 17] (0 : uint64));
    assert { [@expl:remainder by zero] [#"../../../../../../src/gcd.rs" 45 12 45 17] not _40 };
    goto BB10
  }
  BB10 {
    [#"../../../../../../src/gcd.rs" 45 8 45 17] y <- y % _39;
    _39 <- any uint64;
    [#"../../../../../../src/gcd.rs" 46 23 46 29] _43 <- Borrow.borrow_mut x;
    [#"../../../../../../src/gcd.rs" 46 23 46 29] x <-  ^ _43;
    [#"../../../../../../src/gcd.rs" 46 23 46 29] _42 <- Borrow.borrow_final ( * _43) (Borrow.get_id _43);
    [#"../../../../../../src/gcd.rs" 46 23 46 29] _43 <- { _43 with current = ( ^ _42) ; };
    [#"../../../../../../src/gcd.rs" 46 31 46 37] _45 <- Borrow.borrow_mut y;
    [#"../../../../../../src/gcd.rs" 46 31 46 37] y <-  ^ _45;
    [#"../../../../../../src/gcd.rs" 46 31 46 37] _44 <- Borrow.borrow_final ( * _45) (Borrow.get_id _45);
    [#"../../../../../../src/gcd.rs" 46 31 46 37] _45 <- { _45 with current = ( ^ _44) ; };
    [#"../../../../../../src/gcd.rs" 46 8 46 38] _41 <- ([#"../../../../../../src/gcd.rs" 46 8 46 38] swap0 _42 _44);
    _42 <- any borrowed uint64;
    _44 <- any borrowed uint64;
    goto BB11
  }
  BB11 {
    assume { resolve1 _45 };
    assume { resolve1 _43 };
    goto BB4
  }
  BB12 {
    assert { [@expl:assertion] [#"../../../../../../src/gcd.rs" 49 18 49 47] is_common_divisor0 (UInt64.to_int x) (UInt64.to_int y) (UInt64.to_int y) };
    [#"../../../../../../src/gcd.rs" 50 4 50 5] _0 <- y;
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotSandbox_UnionFind_UnionFind_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_unionfind  =
    | C_UnionFind (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  let function unionfind_parent (self : t_unionfind) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_UnionFind a -> a
      end
end
module CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  type t_unionfindmodel  =
    | C_UnionFindModel (Seq.seq usize)
    
  let function unionfindmodel_parent (self : t_unionfindmodel) : Seq.seq usize = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_UnionFindModel a -> a
      end
end
module CreusotSandbox_UnionFind_Impl1_Reach_Impl
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.Borrow
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  constant self  : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
  constant src  : int
  constant dst  : int
  constant len  : int
  predicate reach [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  goal vc_reach : match len < 0 with
    | True -> true
    | False -> match len = 0 with
      | True -> true
      | False -> if src <> dst then
        0 <= ([#"../../../../../../src/union_find.rs" 49 14 49 17] len) /\ ([#"../../../../../../src/union_find.rs" 49 14 49 17] len - 1) < ([#"../../../../../../src/union_find.rs" 49 14 49 17] len)
      else
        true
      
      end
    end
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachIntro_Impl
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.Borrow
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  predicate reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  axiom reach0_def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach0 self src dst len = ([#"../../../../../../src/union_find.rs" 51 8 59 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach0 self (parent0 self src) dst (len - 1)
  )
  val reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach0 self src dst len }
    
  constant self  : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
  function lemma_reach_intro [#"../../../../../../src/union_find.rs" 68 4 68 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  goal vc_lemma_reach_intro : [#"../../../../../../src/union_find.rs" 64 8 66 97] (forall src : int . reach0 self src src 0) /\ (forall len : int . forall dst : int . forall src : int . src <> dst
   -> reach0 self (parent0 self src) dst len  -> reach0 self src dst (len + 1))
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachIff_Impl
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.Borrow
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  predicate reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  axiom reach0_def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach0 self src dst len = ([#"../../../../../../src/union_find.rs" 51 8 59 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach0 self (parent0 self src) dst (len - 1)
  )
  val reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach0 self src dst len }
    
  constant self  : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
  function lemma_reach_iff [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  goal vc_lemma_reach_iff : [#"../../../../../../src/union_find.rs" 71 4 75 16] forall len : int . forall dst : int . forall src : int . reach0 self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ reach0 self (parent0 self src) dst (len - 1))
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachNonneg_Impl
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.Borrow
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  predicate reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  axiom reach0_def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach0 self src dst len = ([#"../../../../../../src/union_find.rs" 51 8 59 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach0 self (parent0 self src) dst (len - 1)
  )
  val reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach0 self src dst len }
    
  constant self  : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
  function lemma_reach_nonneg [#"../../../../../../src/union_find.rs" 81 4 81 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  goal vc_lemma_reach_nonneg : [#"../../../../../../src/union_find.rs" 79 4 80 54] forall len : int . forall dst : int . forall src : int . reach0 self src dst len
   -> 0 <= len
end
module CreusotSandbox_UnionFind_Impl1_ReachRefl_Impl
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.Borrow
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  predicate reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  axiom reach0_def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach0 self src dst len = ([#"../../../../../../src/union_find.rs" 51 8 59 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach0 self (parent0 self src) dst (len - 1)
  )
  val reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach0 self src dst len }
    
  use seq.Seq
  predicate in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 32 20 32 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range0 self i }
    
  constant self  : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
  predicate reach_refl [#"../../../../../../src/union_find.rs" 85 4 85 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
  goal vc_reach_refl : [#"../../../../../../src/union_find.rs" 84 14 84 28] ([#"../../../../../../src/union_find.rs" 86 8 90 9] forall i : int . in_range0 self i
   -> reach0 self i i 0) = true
end
module CreusotSandbox_UnionFind_Impl1_LemmaBelongUnique_Impl
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.Borrow
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  predicate reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  axiom reach0_def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach0 self src dst len = ([#"../../../../../../src/union_find.rs" 51 8 59 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach0 self (parent0 self src) dst (len - 1)
  )
  val reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach0 self src dst len }
    
  function lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 70 4 70 12] ()
  val lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_iff0 self }
    
  axiom lemma_reach_iff0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 71 4 75 16] forall len : int . forall dst : int . forall src : int . reach0 self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ reach0 self (parent0 self src) dst (len - 1))
  use seq.Seq
  predicate in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 32 20 32 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range0 self i }
    
  predicate is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 45 20 45 59] in_range0 self i /\ parent0 self i = i
  val is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = is_root0 self i }
    
  predicate belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int)
    
   =
    [#"../../../../../../src/union_find.rs" 95 8 98 9] is_root0 self root /\ (exists len : int . reach0 self i root len)
  val belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int) : bool
    ensures { result = belong0 self i root }
    
  constant self  : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
  function lemma_belong_unique [#"../../../../../../src/union_find.rs" 105 4 105 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  goal vc_lemma_belong_unique : ([#"../../../../../../src/union_find.rs" 71 4 75 16] forall len : int . forall dst : int . forall src : int . reach0 self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ reach0 self (parent0 self src) dst (len - 1)))
   -> (let _ = lemma_reach_iff0 self in [#"../../../../../../src/union_find.rs" 102 4 104 16] forall r2 : int . forall r1 : int . forall i : int . belong0 self i r1
   -> belong0 self i r2  -> r1 = r2)
end
module CreusotSandbox_UnionFind_Impl1_RootBelongRefl_Impl
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.Borrow
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  predicate reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  axiom reach0_def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach0 self src dst len = ([#"../../../../../../src/union_find.rs" 51 8 59 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach0 self (parent0 self src) dst (len - 1)
  )
  val reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach0 self src dst len }
    
  use seq.Seq
  predicate in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 32 20 32 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range0 self i }
    
  predicate is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 45 20 45 59] in_range0 self i /\ parent0 self i = i
  val is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = is_root0 self i }
    
  predicate belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int)
    
   =
    [#"../../../../../../src/union_find.rs" 95 8 98 9] is_root0 self root /\ (exists len : int . reach0 self i root len)
  val belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int) : bool
    ensures { result = belong0 self i root }
    
  constant self  : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
  function root_belong_refl [#"../../../../../../src/union_find.rs" 131 4 131 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    
  goal vc_root_belong_refl : [#"../../../../../../src/union_find.rs" 130 14 130 28] ([#"../../../../../../src/union_find.rs" 132 8 134 9] forall i : int . is_root0 self i
   -> belong0 self i i) = true
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentEq_Impl
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.Borrow
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  use seq.Seq
  use prelude.UIntSize
  function update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../src/union_find.rs" 149 12 151 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (Seq.set (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) (UIntSize.to_int i) r)
  val update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = update0 self i r }
    
  use seq.Seq
  predicate in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 32 20 32 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range0 self i }
    
  constant self  : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
  function lemma_update_parent_eq [#"../../../../../../src/union_find.rs" 158 4 158 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  goal vc_lemma_update_parent_eq : [#"../../../../../../src/union_find.rs" 156 4 157 97] forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> parent0 (update0 self i r) (UIntSize.to_int i) = UIntSize.to_int r
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentNe_Impl
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.Borrow
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  use seq.Seq
  use prelude.UIntSize
  function update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../src/union_find.rs" 149 12 151 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (Seq.set (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) (UIntSize.to_int i) r)
  val update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = update0 self i r }
    
  use seq.Seq
  predicate in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 32 20 32 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range0 self i }
    
  constant self  : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
  function lemma_update_parent_ne [#"../../../../../../src/union_find.rs" 165 4 165 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  goal vc_lemma_update_parent_ne : [#"../../../../../../src/union_find.rs" 161 4 164 57] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 self j  -> UIntSize.to_int i <> j  -> parent0 (update0 self i r) j = parent0 self j
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateInRange_Impl
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use seq.Seq
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  use prelude.Borrow
  function update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../src/union_find.rs" 149 12 151 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (Seq.set (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) (UIntSize.to_int i) r)
  val update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = update0 self i r }
    
  use seq.Seq
  predicate in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 32 20 32 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range0 self i }
    
  constant self  : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
  function lemma_update_in_range [#"../../../../../../src/union_find.rs" 171 4 171 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  goal vc_lemma_update_in_range : [#"../../../../../../src/union_find.rs" 168 4 170 82] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 (update0 self i r) j = in_range0 self j
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachableTrans_Impl
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.Borrow
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  predicate reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  axiom reach0_def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach0 self src dst len = ([#"../../../../../../src/union_find.rs" 51 8 59 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach0 self (parent0 self src) dst (len - 1)
  )
  val reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach0 self src dst len }
    
  function lemma_reach_nonneg0 [#"../../../../../../src/union_find.rs" 81 4 81 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 78 4 78 12] ()
  val lemma_reach_nonneg0 [#"../../../../../../src/union_find.rs" 81 4 81 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_nonneg0 self }
    
  axiom lemma_reach_nonneg0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 79 4 80 54] forall len : int . forall dst : int . forall src : int . reach0 self src dst len
   -> 0 <= len
  function lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 70 4 70 12] ()
  val lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_iff0 self }
    
  axiom lemma_reach_iff0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 71 4 75 16] forall len : int . forall dst : int . forall src : int . reach0 self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ reach0 self (parent0 self src) dst (len - 1))
  function lemma_reach_intro0 [#"../../../../../../src/union_find.rs" 68 4 68 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 62 4 62 12] ()
  val lemma_reach_intro0 [#"../../../../../../src/union_find.rs" 68 4 68 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_intro0 self }
    
  axiom lemma_reach_intro0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 64 8 66 97] (forall src : int . reach0 self src src 0) /\ (forall len : int . forall dst : int . forall src : int . src <> dst
   -> reach0 self (parent0 self src) dst len  -> reach0 self src dst (len + 1))
  use seq.Seq
  predicate in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 32 20 32 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range0 self i }
    
  predicate is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 45 20 45 59] in_range0 self i /\ parent0 self i = i
  val is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = is_root0 self i }
    
  predicate belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int)
    
   =
    [#"../../../../../../src/union_find.rs" 95 8 98 9] is_root0 self root /\ (exists len : int . reach0 self i root len)
  val belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int) : bool
    ensures { result = belong0 self i root }
    
  predicate invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 111 8 113 9] forall i : int . in_range0 self i
     -> (exists root : int . belong0 self i root)
  val invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_belong0 self }
    
  predicate invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 37 8 40 9] forall i : int . in_range0 self i
     -> in_range0 self (parent0 self i)
  val invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_range0 self }
    
  predicate invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 118 8 118 57] invariant_range0 self /\ invariant_belong0 self
  val invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant0 self }
    
  constant self  : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
  function lemma_reachable_trans [#"../../../../../../src/union_find.rs" 180 4 180 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  goal vc_lemma_reachable_trans : ([#"../../../../../../src/union_find.rs" 175 16 175 32] invariant0 self)
   -> ([#"../../../../../../src/union_find.rs" 64 8 66 97] (forall src : int . reach0 self src src 0) /\ (forall len : int . forall dst : int . forall src : int . src <> dst
   -> reach0 self (parent0 self src) dst len  -> reach0 self src dst (len + 1)))
   -> (let _ = lemma_reach_intro0 self in ([#"../../../../../../src/union_find.rs" 71 4 75 16] forall len : int . forall dst : int . forall src : int . reach0 self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ reach0 self (parent0 self src) dst (len - 1)))
   -> (let _ = lemma_reach_iff0 self in ([#"../../../../../../src/union_find.rs" 79 4 80 54] forall len : int . forall dst : int . forall src : int . reach0 self src dst len
   -> 0 <= len)
   -> (let _ = lemma_reach_nonneg0 self in [#"../../../../../../src/union_find.rs" 176 4 179 54] forall k : int . forall j : int . forall i : int . (exists n : int . reach0 self i j n)
   -> (exists n : int . reach0 self j k n)  -> (exists n : int . reach0 self i k n))))
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUpdated_Impl
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.Borrow
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  predicate reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  axiom reach0_def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach0 self src dst len = ([#"../../../../../../src/union_find.rs" 51 8 59 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach0 self (parent0 self src) dst (len - 1)
  )
  val reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach0 self src dst len }
    
  function lemma_reach_nonneg0 [#"../../../../../../src/union_find.rs" 81 4 81 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 78 4 78 12] ()
  val lemma_reach_nonneg0 [#"../../../../../../src/union_find.rs" 81 4 81 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_nonneg0 self }
    
  axiom lemma_reach_nonneg0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 79 4 80 54] forall len : int . forall dst : int . forall src : int . reach0 self src dst len
   -> 0 <= len
  function lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 70 4 70 12] ()
  val lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_iff0 self }
    
  axiom lemma_reach_iff0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 71 4 75 16] forall len : int . forall dst : int . forall src : int . reach0 self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ reach0 self (parent0 self src) dst (len - 1))
  function lemma_reach_intro0 [#"../../../../../../src/union_find.rs" 68 4 68 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 62 4 62 12] ()
  val lemma_reach_intro0 [#"../../../../../../src/union_find.rs" 68 4 68 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_intro0 self }
    
  axiom lemma_reach_intro0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 64 8 66 97] (forall src : int . reach0 self src src 0) /\ (forall len : int . forall dst : int . forall src : int . src <> dst
   -> reach0 self (parent0 self src) dst len  -> reach0 self src dst (len + 1))
  use seq.Seq
  use prelude.UIntSize
  function update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../src/union_find.rs" 149 12 151 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (Seq.set (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) (UIntSize.to_int i) r)
  val update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = update0 self i r }
    
  use seq.Seq
  predicate in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 32 20 32 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range0 self i }
    
  function lemma_update_in_range0 [#"../../../../../../src/union_find.rs" 171 4 171 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 167 4 167 12] ()
  val lemma_update_in_range0 [#"../../../../../../src/union_find.rs" 171 4 171 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_in_range0 self }
    
  axiom lemma_update_in_range0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 168 4 170 82] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 (update0 self i r) j = in_range0 self j
  function lemma_update_parent_ne0 [#"../../../../../../src/union_find.rs" 165 4 165 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 160 4 160 12] ()
  val lemma_update_parent_ne0 [#"../../../../../../src/union_find.rs" 165 4 165 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_parent_ne0 self }
    
  axiom lemma_update_parent_ne0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 161 4 164 57] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 self j  -> UIntSize.to_int i <> j  -> parent0 (update0 self i r) j = parent0 self j
  function lemma_update_parent_eq0 [#"../../../../../../src/union_find.rs" 158 4 158 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 155 4 155 12] ()
  val lemma_update_parent_eq0 [#"../../../../../../src/union_find.rs" 158 4 158 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_parent_eq0 self }
    
  axiom lemma_update_parent_eq0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 156 4 157 97] forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> parent0 (update0 self i r) (UIntSize.to_int i) = UIntSize.to_int r
  predicate is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 45 20 45 59] in_range0 self i /\ parent0 self i = i
  val is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = is_root0 self i }
    
  predicate belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int)
    
   =
    [#"../../../../../../src/union_find.rs" 95 8 98 9] is_root0 self root /\ (exists len : int . reach0 self i root len)
  val belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int) : bool
    ensures { result = belong0 self i root }
    
  predicate invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 111 8 113 9] forall i : int . in_range0 self i
     -> (exists root : int . belong0 self i root)
  val invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_belong0 self }
    
  predicate invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 37 8 40 9] forall i : int . in_range0 self i
     -> in_range0 self (parent0 self i)
  val invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_range0 self }
    
  predicate invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 118 8 118 57] invariant_range0 self /\ invariant_belong0 self
  val invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant0 self }
    
  constant self  : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
  constant i  : usize
  constant r  : usize
  function lemma_update_belong_updated [#"../../../../../../src/union_find.rs" 194 4 194 61] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
  goal vc_lemma_update_belong_updated : ([#"../../../../../../src/union_find.rs" 191 16 191 32] is_root0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 190 16 190 33] in_range0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 189 16 189 33] in_range0 self (UIntSize.to_int i))
   -> ([#"../../../../../../src/union_find.rs" 188 16 188 32] invariant0 self)
   -> ([#"../../../../../../src/union_find.rs" 156 4 157 97] forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> parent0 (update0 self i r) (UIntSize.to_int i) = UIntSize.to_int r)
   -> (let _ = lemma_update_parent_eq0 self in ([#"../../../../../../src/union_find.rs" 161 4 164 57] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 self j  -> UIntSize.to_int i <> j  -> parent0 (update0 self i r) j = parent0 self j)
   -> (let _ = lemma_update_parent_ne0 self in ([#"../../../../../../src/union_find.rs" 168 4 170 82] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 (update0 self i r) j = in_range0 self j)
   -> (let _ = lemma_update_in_range0 self in ([#"../../../../../../src/union_find.rs" 64 8 66 97] (forall src : int . reach0 self src src 0) /\ (forall len : int . forall dst : int . forall src : int . src <> dst
   -> reach0 self (parent0 self src) dst len  -> reach0 self src dst (len + 1)))
   -> (let _ = lemma_reach_intro0 self in ([#"../../../../../../src/union_find.rs" 71 4 75 16] forall len : int . forall dst : int . forall src : int . reach0 self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ reach0 self (parent0 self src) dst (len - 1)))
   -> (let _ = lemma_reach_iff0 self in ([#"../../../../../../src/union_find.rs" 79 4 80 54] forall len : int . forall dst : int . forall src : int . reach0 self src dst len
   -> 0 <= len)
   -> (let _ = lemma_reach_nonneg0 self in [#"../../../../../../src/union_find.rs" 192 4 193 94] forall n : int . forall j : int . in_range0 self j
   -> reach0 self j (UIntSize.to_int i) n  -> belong0 (update0 self i r) j (UIntSize.to_int r)))))))
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongPreserved_Impl
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.Borrow
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  predicate reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  axiom reach0_def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach0 self src dst len = ([#"../../../../../../src/union_find.rs" 51 8 59 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach0 self (parent0 self src) dst (len - 1)
  )
  val reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach0 self src dst len }
    
  function lemma_reach_nonneg0 [#"../../../../../../src/union_find.rs" 81 4 81 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 78 4 78 12] ()
  val lemma_reach_nonneg0 [#"../../../../../../src/union_find.rs" 81 4 81 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_nonneg0 self }
    
  axiom lemma_reach_nonneg0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 79 4 80 54] forall len : int . forall dst : int . forall src : int . reach0 self src dst len
   -> 0 <= len
  function lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 70 4 70 12] ()
  val lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_iff0 self }
    
  axiom lemma_reach_iff0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 71 4 75 16] forall len : int . forall dst : int . forall src : int . reach0 self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ reach0 self (parent0 self src) dst (len - 1))
  function lemma_reach_intro0 [#"../../../../../../src/union_find.rs" 68 4 68 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 62 4 62 12] ()
  val lemma_reach_intro0 [#"../../../../../../src/union_find.rs" 68 4 68 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_intro0 self }
    
  axiom lemma_reach_intro0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 64 8 66 97] (forall src : int . reach0 self src src 0) /\ (forall len : int . forall dst : int . forall src : int . src <> dst
   -> reach0 self (parent0 self src) dst len  -> reach0 self src dst (len + 1))
  use seq.Seq
  use prelude.UIntSize
  function update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../src/union_find.rs" 149 12 151 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (Seq.set (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) (UIntSize.to_int i) r)
  val update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = update0 self i r }
    
  use seq.Seq
  predicate in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 32 20 32 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range0 self i }
    
  function lemma_update_in_range0 [#"../../../../../../src/union_find.rs" 171 4 171 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 167 4 167 12] ()
  val lemma_update_in_range0 [#"../../../../../../src/union_find.rs" 171 4 171 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_in_range0 self }
    
  axiom lemma_update_in_range0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 168 4 170 82] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 (update0 self i r) j = in_range0 self j
  function lemma_update_parent_ne0 [#"../../../../../../src/union_find.rs" 165 4 165 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 160 4 160 12] ()
  val lemma_update_parent_ne0 [#"../../../../../../src/union_find.rs" 165 4 165 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_parent_ne0 self }
    
  axiom lemma_update_parent_ne0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 161 4 164 57] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 self j  -> UIntSize.to_int i <> j  -> parent0 (update0 self i r) j = parent0 self j
  function lemma_update_parent_eq0 [#"../../../../../../src/union_find.rs" 158 4 158 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 155 4 155 12] ()
  val lemma_update_parent_eq0 [#"../../../../../../src/union_find.rs" 158 4 158 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_parent_eq0 self }
    
  axiom lemma_update_parent_eq0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 156 4 157 97] forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> parent0 (update0 self i r) (UIntSize.to_int i) = UIntSize.to_int r
  predicate is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 45 20 45 59] in_range0 self i /\ parent0 self i = i
  val is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = is_root0 self i }
    
  predicate belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int)
    
   =
    [#"../../../../../../src/union_find.rs" 95 8 98 9] is_root0 self root /\ (exists len : int . reach0 self i root len)
  val belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int) : bool
    ensures { result = belong0 self i root }
    
  predicate invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 111 8 113 9] forall i : int . in_range0 self i
     -> (exists root : int . belong0 self i root)
  val invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_belong0 self }
    
  predicate invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 37 8 40 9] forall i : int . in_range0 self i
     -> in_range0 self (parent0 self i)
  val invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_range0 self }
    
  predicate invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 118 8 118 57] invariant_range0 self /\ invariant_belong0 self
  val invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant0 self }
    
  constant self  : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
  constant i  : usize
  constant r  : usize
  function lemma_update_belong_preserved [#"../../../../../../src/union_find.rs" 213 4 213 63] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
  goal vc_lemma_update_belong_preserved : ([#"../../../../../../src/union_find.rs" 208 16 208 32] is_root0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 207 16 207 33] in_range0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 206 16 206 33] in_range0 self (UIntSize.to_int i))
   -> ([#"../../../../../../src/union_find.rs" 205 16 205 32] invariant0 self)
   -> ([#"../../../../../../src/union_find.rs" 156 4 157 97] forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> parent0 (update0 self i r) (UIntSize.to_int i) = UIntSize.to_int r)
   -> (let _ = lemma_update_parent_eq0 self in ([#"../../../../../../src/union_find.rs" 161 4 164 57] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 self j  -> UIntSize.to_int i <> j  -> parent0 (update0 self i r) j = parent0 self j)
   -> (let _ = lemma_update_parent_ne0 self in ([#"../../../../../../src/union_find.rs" 168 4 170 82] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 (update0 self i r) j = in_range0 self j)
   -> (let _ = lemma_update_in_range0 self in ([#"../../../../../../src/union_find.rs" 64 8 66 97] (forall src : int . reach0 self src src 0) /\ (forall len : int . forall dst : int . forall src : int . src <> dst
   -> reach0 self (parent0 self src) dst len  -> reach0 self src dst (len + 1)))
   -> (let _ = lemma_reach_intro0 self in ([#"../../../../../../src/union_find.rs" 71 4 75 16] forall len : int . forall dst : int . forall src : int . reach0 self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ reach0 self (parent0 self src) dst (len - 1)))
   -> (let _ = lemma_reach_iff0 self in ([#"../../../../../../src/union_find.rs" 79 4 80 54] forall len : int . forall dst : int . forall src : int . reach0 self src dst len
   -> 0 <= len)
   -> (let _ = lemma_reach_nonneg0 self in [#"../../../../../../src/union_find.rs" 209 4 212 68] forall g : int . forall j : int . in_range0 self j
   -> not (exists n : int . reach0 self j (UIntSize.to_int i) n)
   -> belong0 (update0 self i r) j g = belong0 self j g))))))
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongShortcut_Impl
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.Borrow
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  predicate reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  axiom reach0_def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach0 self src dst len = ([#"../../../../../../src/union_find.rs" 51 8 59 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach0 self (parent0 self src) dst (len - 1)
  )
  val reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach0 self src dst len }
    
  function lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 70 4 70 12] ()
  val lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_iff0 self }
    
  axiom lemma_reach_iff0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 71 4 75 16] forall len : int . forall dst : int . forall src : int . reach0 self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ reach0 self (parent0 self src) dst (len - 1))
  use seq.Seq
  predicate in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 32 20 32 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range0 self i }
    
  predicate is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 45 20 45 59] in_range0 self i /\ parent0 self i = i
  val is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = is_root0 self i }
    
  predicate belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int)
    
   =
    [#"../../../../../../src/union_find.rs" 95 8 98 9] is_root0 self root /\ (exists len : int . reach0 self i root len)
  val belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int) : bool
    ensures { result = belong0 self i root }
    
  function lemma_belong_unique0 [#"../../../../../../src/union_find.rs" 105 4 105 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 106 8 106 30] let _ = lemma_reach_iff0 self in ()
  val lemma_belong_unique0 [#"../../../../../../src/union_find.rs" 105 4 105 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_belong_unique0 self }
    
  axiom lemma_belong_unique0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 102 4 104 16] forall r2 : int . forall r1 : int . forall i : int . belong0 self i r1
   -> belong0 self i r2  -> r1 = r2
  function lemma_reach_nonneg0 [#"../../../../../../src/union_find.rs" 81 4 81 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 78 4 78 12] ()
  val lemma_reach_nonneg0 [#"../../../../../../src/union_find.rs" 81 4 81 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_nonneg0 self }
    
  axiom lemma_reach_nonneg0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 79 4 80 54] forall len : int . forall dst : int . forall src : int . reach0 self src dst len
   -> 0 <= len
  function lemma_reach_intro0 [#"../../../../../../src/union_find.rs" 68 4 68 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 62 4 62 12] ()
  val lemma_reach_intro0 [#"../../../../../../src/union_find.rs" 68 4 68 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_intro0 self }
    
  axiom lemma_reach_intro0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 64 8 66 97] (forall src : int . reach0 self src src 0) /\ (forall len : int . forall dst : int . forall src : int . src <> dst
   -> reach0 self (parent0 self src) dst len  -> reach0 self src dst (len + 1))
  predicate invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 111 8 113 9] forall i : int . in_range0 self i
     -> (exists root : int . belong0 self i root)
  val invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_belong0 self }
    
  predicate invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 37 8 40 9] forall i : int . in_range0 self i
     -> in_range0 self (parent0 self i)
  val invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_range0 self }
    
  predicate invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 118 8 118 57] invariant_range0 self /\ invariant_belong0 self
  val invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant0 self }
    
  function lemma_reachable_trans0 [#"../../../../../../src/union_find.rs" 180 4 180 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 181 8 181 32] let _ = lemma_reach_intro0 self in let _ = lemma_reach_iff0 self in let _ = lemma_reach_nonneg0 self in ()
  val lemma_reachable_trans0 [#"../../../../../../src/union_find.rs" 180 4 180 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    requires {[#"../../../../../../src/union_find.rs" 175 16 175 32] invariant0 self}
    ensures { result = lemma_reachable_trans0 self }
    
  axiom lemma_reachable_trans0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . ([#"../../../../../../src/union_find.rs" 175 16 175 32] invariant0 self)
   -> ([#"../../../../../../src/union_find.rs" 176 4 179 54] forall k : int . forall j : int . forall i : int . (exists n : int . reach0 self i j n)
   -> (exists n : int . reach0 self j k n)  -> (exists n : int . reach0 self i k n))
  use seq.Seq
  use prelude.UIntSize
  function update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../src/union_find.rs" 149 12 151 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (Seq.set (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) (UIntSize.to_int i) r)
  val update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = update0 self i r }
    
  function lemma_update_in_range0 [#"../../../../../../src/union_find.rs" 171 4 171 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 167 4 167 12] ()
  val lemma_update_in_range0 [#"../../../../../../src/union_find.rs" 171 4 171 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_in_range0 self }
    
  axiom lemma_update_in_range0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 168 4 170 82] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 (update0 self i r) j = in_range0 self j
  function lemma_update_parent_ne0 [#"../../../../../../src/union_find.rs" 165 4 165 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 160 4 160 12] ()
  val lemma_update_parent_ne0 [#"../../../../../../src/union_find.rs" 165 4 165 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_parent_ne0 self }
    
  axiom lemma_update_parent_ne0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 161 4 164 57] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 self j  -> UIntSize.to_int i <> j  -> parent0 (update0 self i r) j = parent0 self j
  function lemma_update_parent_eq0 [#"../../../../../../src/union_find.rs" 158 4 158 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 155 4 155 12] ()
  val lemma_update_parent_eq0 [#"../../../../../../src/union_find.rs" 158 4 158 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_parent_eq0 self }
    
  axiom lemma_update_parent_eq0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 156 4 157 97] forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> parent0 (update0 self i r) (UIntSize.to_int i) = UIntSize.to_int r
  function lemma_update_belong_preserved0 [#"../../../../../../src/union_find.rs" 213 4 213 63] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 214 8 214 37] let _ = lemma_update_parent_eq0 self in let _ = lemma_update_parent_ne0 self in let _ = lemma_update_in_range0 self in let _ = lemma_reach_intro0 self in let _ = lemma_reach_iff0 self in let _ = lemma_reach_nonneg0 self in ()
  val lemma_update_belong_preserved0 [#"../../../../../../src/union_find.rs" 213 4 213 63] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../../../../../src/union_find.rs" 205 16 205 32] invariant0 self}
    requires {[#"../../../../../../src/union_find.rs" 206 16 206 33] in_range0 self (UIntSize.to_int i)}
    requires {[#"../../../../../../src/union_find.rs" 207 16 207 33] in_range0 self (UIntSize.to_int r)}
    requires {[#"../../../../../../src/union_find.rs" 208 16 208 32] is_root0 self (UIntSize.to_int r)}
    ensures { result = lemma_update_belong_preserved0 self i r }
    
  axiom lemma_update_belong_preserved0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../../../../../src/union_find.rs" 205 16 205 32] invariant0 self)
   -> ([#"../../../../../../src/union_find.rs" 206 16 206 33] in_range0 self (UIntSize.to_int i))
   -> ([#"../../../../../../src/union_find.rs" 207 16 207 33] in_range0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 208 16 208 32] is_root0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 209 4 212 68] forall g : int . forall j : int . in_range0 self j
   -> not (exists n : int . reach0 self j (UIntSize.to_int i) n)  -> belong0 (update0 self i r) j g = belong0 self j g)
  function lemma_update_belong_updated0 [#"../../../../../../src/union_find.rs" 194 4 194 61] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 195 8 195 37] let _ = lemma_update_parent_eq0 self in let _ = lemma_update_parent_ne0 self in let _ = lemma_update_in_range0 self in let _ = lemma_reach_intro0 self in let _ = lemma_reach_iff0 self in let _ = lemma_reach_nonneg0 self in ()
  val lemma_update_belong_updated0 [#"../../../../../../src/union_find.rs" 194 4 194 61] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../../../../../src/union_find.rs" 188 16 188 32] invariant0 self}
    requires {[#"../../../../../../src/union_find.rs" 189 16 189 33] in_range0 self (UIntSize.to_int i)}
    requires {[#"../../../../../../src/union_find.rs" 190 16 190 33] in_range0 self (UIntSize.to_int r)}
    requires {[#"../../../../../../src/union_find.rs" 191 16 191 32] is_root0 self (UIntSize.to_int r)}
    ensures { result = lemma_update_belong_updated0 self i r }
    
  axiom lemma_update_belong_updated0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../../../../../src/union_find.rs" 188 16 188 32] invariant0 self)
   -> ([#"../../../../../../src/union_find.rs" 189 16 189 33] in_range0 self (UIntSize.to_int i))
   -> ([#"../../../../../../src/union_find.rs" 190 16 190 33] in_range0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 191 16 191 32] is_root0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 192 4 193 94] forall n : int . forall j : int . in_range0 self j
   -> reach0 self j (UIntSize.to_int i) n  -> belong0 (update0 self i r) j (UIntSize.to_int r))
  function equal0 [#"../../../../../../src/union_find.rs" 138 4 138 42] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (another : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    
   =
    [#"../../../../../../src/union_find.rs" 139 8 143 9] invariant0 self /\ invariant0 another /\ (forall i : int . in_range0 self i = in_range0 another i /\ (forall g : int . forall i : int . in_range0 self i
     -> belong0 self i g = belong0 another i g))
  val equal0 [#"../../../../../../src/union_find.rs" 138 4 138 42] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (another : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = equal0 self another }
    
  constant self  : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
  constant i  : usize
  constant r  : usize
  function lemma_update_belong_shortcut [#"../../../../../../src/union_find.rs" 235 4 235 62] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
  goal vc_lemma_update_belong_shortcut : ([#"../../../../../../src/union_find.rs" 227 16 227 32] is_root0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 226 16 226 33] in_range0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 225 16 225 33] in_range0 self (UIntSize.to_int i))
   -> ([#"../../../../../../src/union_find.rs" 224 16 224 32] invariant0 self)
   -> (([#"../../../../../../src/union_find.rs" 191 16 191 32] is_root0 self (UIntSize.to_int r)) && ([#"../../../../../../src/union_find.rs" 190 16 190 33] in_range0 self (UIntSize.to_int r)) && ([#"../../../../../../src/union_find.rs" 189 16 189 33] in_range0 self (UIntSize.to_int i)) && ([#"../../../../../../src/union_find.rs" 188 16 188 32] invariant0 self)) /\ (([#"../../../../../../src/union_find.rs" 192 4 193 94] forall n : int . forall j : int . in_range0 self j
   -> reach0 self j (UIntSize.to_int i) n  -> belong0 (update0 self i r) j (UIntSize.to_int r))
   -> (let _ = lemma_update_belong_updated0 self i r in (([#"../../../../../../src/union_find.rs" 208 16 208 32] is_root0 self (UIntSize.to_int r)) && ([#"../../../../../../src/union_find.rs" 207 16 207 33] in_range0 self (UIntSize.to_int r)) && ([#"../../../../../../src/union_find.rs" 206 16 206 33] in_range0 self (UIntSize.to_int i)) && ([#"../../../../../../src/union_find.rs" 205 16 205 32] invariant0 self)) /\ (([#"../../../../../../src/union_find.rs" 209 4 212 68] forall g : int . forall j : int . in_range0 self j
   -> not (exists n : int . reach0 self j (UIntSize.to_int i) n)  -> belong0 (update0 self i r) j g = belong0 self j g)
   -> (let _ = lemma_update_belong_preserved0 self i r in ([#"../../../../../../src/union_find.rs" 175 16 175 32] invariant0 self) /\ (([#"../../../../../../src/union_find.rs" 176 4 179 54] forall k : int . forall j : int . forall i : int . (exists n : int . reach0 self i j n)
   -> (exists n : int . reach0 self j k n)  -> (exists n : int . reach0 self i k n))
   -> (let _ = lemma_reachable_trans0 self in ([#"../../../../../../src/union_find.rs" 102 4 104 16] forall r2 : int . forall r1 : int . forall i : int . belong0 self i r1
   -> belong0 self i r2  -> r1 = r2)
   -> (let _ = lemma_belong_unique0 self in ([#"../../../../../../src/union_find.rs" 234 15 234 44] invariant0 (update0 self i r)) && ([#"../../../../../../src/union_find.rs" 233 4 233 70] belong0 self (UIntSize.to_int i) (UIntSize.to_int r)
   -> equal0 (update0 self i r) self) && ([#"../../../../../../src/union_find.rs" 228 4 232 68] belong0 self (UIntSize.to_int i) (UIntSize.to_int r)
   -> (forall g : int . forall j : int . in_range0 self j  -> belong0 (update0 self i r) j g = belong0 self j g)))))))))
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUnify_Impl
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.Borrow
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  predicate reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  axiom reach0_def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach0 self src dst len = ([#"../../../../../../src/union_find.rs" 51 8 59 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach0 self (parent0 self src) dst (len - 1)
  )
  val reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach0 self src dst len }
    
  function lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 70 4 70 12] ()
  val lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_iff0 self }
    
  axiom lemma_reach_iff0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 71 4 75 16] forall len : int . forall dst : int . forall src : int . reach0 self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ reach0 self (parent0 self src) dst (len - 1))
  use seq.Seq
  predicate in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 32 20 32 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range0 self i }
    
  predicate is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 45 20 45 59] in_range0 self i /\ parent0 self i = i
  val is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = is_root0 self i }
    
  predicate belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int)
    
   =
    [#"../../../../../../src/union_find.rs" 95 8 98 9] is_root0 self root /\ (exists len : int . reach0 self i root len)
  val belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int) : bool
    ensures { result = belong0 self i root }
    
  function lemma_belong_unique0 [#"../../../../../../src/union_find.rs" 105 4 105 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 106 8 106 30] let _ = lemma_reach_iff0 self in ()
  val lemma_belong_unique0 [#"../../../../../../src/union_find.rs" 105 4 105 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_belong_unique0 self }
    
  axiom lemma_belong_unique0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 102 4 104 16] forall r2 : int . forall r1 : int . forall i : int . belong0 self i r1
   -> belong0 self i r2  -> r1 = r2
  function lemma_reach_nonneg0 [#"../../../../../../src/union_find.rs" 81 4 81 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 78 4 78 12] ()
  val lemma_reach_nonneg0 [#"../../../../../../src/union_find.rs" 81 4 81 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_nonneg0 self }
    
  axiom lemma_reach_nonneg0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 79 4 80 54] forall len : int . forall dst : int . forall src : int . reach0 self src dst len
   -> 0 <= len
  function lemma_reach_intro0 [#"../../../../../../src/union_find.rs" 68 4 68 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 62 4 62 12] ()
  val lemma_reach_intro0 [#"../../../../../../src/union_find.rs" 68 4 68 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_intro0 self }
    
  axiom lemma_reach_intro0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 64 8 66 97] (forall src : int . reach0 self src src 0) /\ (forall len : int . forall dst : int . forall src : int . src <> dst
   -> reach0 self (parent0 self src) dst len  -> reach0 self src dst (len + 1))
  predicate invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 111 8 113 9] forall i : int . in_range0 self i
     -> (exists root : int . belong0 self i root)
  val invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_belong0 self }
    
  predicate invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 37 8 40 9] forall i : int . in_range0 self i
     -> in_range0 self (parent0 self i)
  val invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_range0 self }
    
  predicate invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 118 8 118 57] invariant_range0 self /\ invariant_belong0 self
  val invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant0 self }
    
  function lemma_reachable_trans0 [#"../../../../../../src/union_find.rs" 180 4 180 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 181 8 181 32] let _ = lemma_reach_intro0 self in let _ = lemma_reach_iff0 self in let _ = lemma_reach_nonneg0 self in ()
  val lemma_reachable_trans0 [#"../../../../../../src/union_find.rs" 180 4 180 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    requires {[#"../../../../../../src/union_find.rs" 175 16 175 32] invariant0 self}
    ensures { result = lemma_reachable_trans0 self }
    
  axiom lemma_reachable_trans0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . ([#"../../../../../../src/union_find.rs" 175 16 175 32] invariant0 self)
   -> ([#"../../../../../../src/union_find.rs" 176 4 179 54] forall k : int . forall j : int . forall i : int . (exists n : int . reach0 self i j n)
   -> (exists n : int . reach0 self j k n)  -> (exists n : int . reach0 self i k n))
  use seq.Seq
  use prelude.UIntSize
  function update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../src/union_find.rs" 149 12 151 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (Seq.set (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) (UIntSize.to_int i) r)
  val update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = update0 self i r }
    
  function lemma_update_in_range0 [#"../../../../../../src/union_find.rs" 171 4 171 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 167 4 167 12] ()
  val lemma_update_in_range0 [#"../../../../../../src/union_find.rs" 171 4 171 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_in_range0 self }
    
  axiom lemma_update_in_range0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 168 4 170 82] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 (update0 self i r) j = in_range0 self j
  function lemma_update_parent_ne0 [#"../../../../../../src/union_find.rs" 165 4 165 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 160 4 160 12] ()
  val lemma_update_parent_ne0 [#"../../../../../../src/union_find.rs" 165 4 165 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_parent_ne0 self }
    
  axiom lemma_update_parent_ne0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 161 4 164 57] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 self j  -> UIntSize.to_int i <> j  -> parent0 (update0 self i r) j = parent0 self j
  function lemma_update_parent_eq0 [#"../../../../../../src/union_find.rs" 158 4 158 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 155 4 155 12] ()
  val lemma_update_parent_eq0 [#"../../../../../../src/union_find.rs" 158 4 158 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_parent_eq0 self }
    
  axiom lemma_update_parent_eq0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 156 4 157 97] forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> parent0 (update0 self i r) (UIntSize.to_int i) = UIntSize.to_int r
  function lemma_update_belong_preserved0 [#"../../../../../../src/union_find.rs" 213 4 213 63] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 214 8 214 37] let _ = lemma_update_parent_eq0 self in let _ = lemma_update_parent_ne0 self in let _ = lemma_update_in_range0 self in let _ = lemma_reach_intro0 self in let _ = lemma_reach_iff0 self in let _ = lemma_reach_nonneg0 self in ()
  val lemma_update_belong_preserved0 [#"../../../../../../src/union_find.rs" 213 4 213 63] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../../../../../src/union_find.rs" 205 16 205 32] invariant0 self}
    requires {[#"../../../../../../src/union_find.rs" 206 16 206 33] in_range0 self (UIntSize.to_int i)}
    requires {[#"../../../../../../src/union_find.rs" 207 16 207 33] in_range0 self (UIntSize.to_int r)}
    requires {[#"../../../../../../src/union_find.rs" 208 16 208 32] is_root0 self (UIntSize.to_int r)}
    ensures { result = lemma_update_belong_preserved0 self i r }
    
  axiom lemma_update_belong_preserved0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../../../../../src/union_find.rs" 205 16 205 32] invariant0 self)
   -> ([#"../../../../../../src/union_find.rs" 206 16 206 33] in_range0 self (UIntSize.to_int i))
   -> ([#"../../../../../../src/union_find.rs" 207 16 207 33] in_range0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 208 16 208 32] is_root0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 209 4 212 68] forall g : int . forall j : int . in_range0 self j
   -> not (exists n : int . reach0 self j (UIntSize.to_int i) n)  -> belong0 (update0 self i r) j g = belong0 self j g)
  function lemma_update_belong_updated0 [#"../../../../../../src/union_find.rs" 194 4 194 61] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 195 8 195 37] let _ = lemma_update_parent_eq0 self in let _ = lemma_update_parent_ne0 self in let _ = lemma_update_in_range0 self in let _ = lemma_reach_intro0 self in let _ = lemma_reach_iff0 self in let _ = lemma_reach_nonneg0 self in ()
  val lemma_update_belong_updated0 [#"../../../../../../src/union_find.rs" 194 4 194 61] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../../../../../src/union_find.rs" 188 16 188 32] invariant0 self}
    requires {[#"../../../../../../src/union_find.rs" 189 16 189 33] in_range0 self (UIntSize.to_int i)}
    requires {[#"../../../../../../src/union_find.rs" 190 16 190 33] in_range0 self (UIntSize.to_int r)}
    requires {[#"../../../../../../src/union_find.rs" 191 16 191 32] is_root0 self (UIntSize.to_int r)}
    ensures { result = lemma_update_belong_updated0 self i r }
    
  axiom lemma_update_belong_updated0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../../../../../src/union_find.rs" 188 16 188 32] invariant0 self)
   -> ([#"../../../../../../src/union_find.rs" 189 16 189 33] in_range0 self (UIntSize.to_int i))
   -> ([#"../../../../../../src/union_find.rs" 190 16 190 33] in_range0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 191 16 191 32] is_root0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 192 4 193 94] forall n : int . forall j : int . in_range0 self j
   -> reach0 self j (UIntSize.to_int i) n  -> belong0 (update0 self i r) j (UIntSize.to_int r))
  constant self  : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
  constant i  : usize
  constant r  : usize
  function lemma_update_belong_unify [#"../../../../../../src/union_find.rs" 257 4 257 59] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
  goal vc_lemma_update_belong_unify : ([#"../../../../../../src/union_find.rs" 246 16 246 32] is_root0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 245 16 245 33] in_range0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 244 16 244 33] in_range0 self (UIntSize.to_int i))
   -> ([#"../../../../../../src/union_find.rs" 243 16 243 32] invariant0 self)
   -> (([#"../../../../../../src/union_find.rs" 191 16 191 32] is_root0 self (UIntSize.to_int r)) && ([#"../../../../../../src/union_find.rs" 190 16 190 33] in_range0 self (UIntSize.to_int r)) && ([#"../../../../../../src/union_find.rs" 189 16 189 33] in_range0 self (UIntSize.to_int i)) && ([#"../../../../../../src/union_find.rs" 188 16 188 32] invariant0 self)) /\ (([#"../../../../../../src/union_find.rs" 192 4 193 94] forall n : int . forall j : int . in_range0 self j
   -> reach0 self j (UIntSize.to_int i) n  -> belong0 (update0 self i r) j (UIntSize.to_int r))
   -> (let _ = lemma_update_belong_updated0 self i r in (([#"../../../../../../src/union_find.rs" 208 16 208 32] is_root0 self (UIntSize.to_int r)) && ([#"../../../../../../src/union_find.rs" 207 16 207 33] in_range0 self (UIntSize.to_int r)) && ([#"../../../../../../src/union_find.rs" 206 16 206 33] in_range0 self (UIntSize.to_int i)) && ([#"../../../../../../src/union_find.rs" 205 16 205 32] invariant0 self)) /\ (([#"../../../../../../src/union_find.rs" 209 4 212 68] forall g : int . forall j : int . in_range0 self j
   -> not (exists n : int . reach0 self j (UIntSize.to_int i) n)  -> belong0 (update0 self i r) j g = belong0 self j g)
   -> (let _ = lemma_update_belong_preserved0 self i r in ([#"../../../../../../src/union_find.rs" 175 16 175 32] invariant0 self) /\ (([#"../../../../../../src/union_find.rs" 176 4 179 54] forall k : int . forall j : int . forall i : int . (exists n : int . reach0 self i j n)
   -> (exists n : int . reach0 self j k n)  -> (exists n : int . reach0 self i k n))
   -> (let _ = lemma_reachable_trans0 self in ([#"../../../../../../src/union_find.rs" 102 4 104 16] forall r2 : int . forall r1 : int . forall i : int . belong0 self i r1
   -> belong0 self i r2  -> r1 = r2)
   -> (let _ = lemma_belong_unique0 self in ([#"../../../../../../src/union_find.rs" 256 15 256 44] invariant0 (update0 self i r)) && ([#"../../../../../../src/union_find.rs" 247 4 255 15] is_root0 self (UIntSize.to_int i)
   -> (forall g : int . forall j : int . in_range0 self j
   -> belong0 (update0 self i r) j g = (if belong0 self j (UIntSize.to_int i) then
    g = UIntSize.to_int r
  else
    belong0 self j g
  ))))))))))
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range a _ -> a
      end
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range _ a -> a
      end
end
module CreusotSandbox_UnionFind_Impl2_New
  use prelude.UIntSize
  use seq.Seq
  predicate inv1 (_x : Seq.seq usize)
  val inv1 (_x : Seq.seq usize) : bool
    ensures { result = inv1 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv3 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv3 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv3 _x }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] inv3 self}
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] inv3 self)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] inv1 (shallow_model1 self)) && ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model1 self) <= UIntSize.to_int max0)
  predicate invariant4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 60 20 60 41] inv1 (shallow_model1 self)
  val invariant4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant4 self }
    
  axiom inv3 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv3 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use seq.Seq
  predicate inv0 (_x : Core_Ops_Range_Range_Type.t_range usize)
  val inv0 (_x : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = inv0 _x }
    
  use prelude.Int
  use seq.Seq
  function deep_model0 (self : usize) : int =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model0 (self : usize) : int
    ensures { result = deep_model0 self }
    
  predicate produces0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ deep_model0 (Core_Ops_Range_Range_Type.range_start self) <= deep_model0 (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0
     -> deep_model0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model0 (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = deep_model0 (Core_Ops_Range_Range_Type.range_start o) - deep_model0 (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model0 (Seq.get visited i) = deep_model0 (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = produces0 self visited o }
    
  function produces_trans0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  val produces_trans0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b}
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c}
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv0 a}
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv1 ab}
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv0 b}
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv1 bc}
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv0 a)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv1 ab)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv0 b)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv1 bc)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv0 c)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  val produces_refl0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv0 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv0 self)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces0 self (Seq.empty ) self)
  use prelude.Borrow
  predicate invariant3 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = invariant3 self }
    
  predicate inv2 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  val inv2 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv2 x = true
  predicate invariant2 (self : Seq.seq usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Seq.seq usize) : bool
    ensures { result = invariant2 self }
    
  axiom inv1 : forall x : Seq.seq usize . inv1 x = true
  predicate invariant1 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = invariant1 self }
    
  axiom inv0 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv0 x = true
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  predicate reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  axiom reach0_def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach0 self src dst len = ([#"../../../../../../src/union_find.rs" 51 8 59 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach0 self (parent0 self src) dst (len - 1)
  )
  val reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach0 self src dst len }
    
  predicate in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 32 20 32 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range0 self i }
    
  predicate is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 45 20 45 59] in_range0 self i /\ parent0 self i = i
  val is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = is_root0 self i }
    
  predicate belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int)
    
   =
    [#"../../../../../../src/union_find.rs" 95 8 98 9] is_root0 self root /\ (exists len : int . reach0 self i root len)
  val belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int) : bool
    ensures { result = belong0 self i root }
    
  predicate invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 111 8 113 9] forall i : int . in_range0 self i
     -> (exists root : int . belong0 self i root)
  val invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_belong0 self }
    
  predicate invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 37 8 40 9] forall i : int . in_range0 self i
     -> in_range0 self (parent0 self i)
  val invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_range0 self }
    
  predicate invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 118 8 118 57] invariant_range0 self /\ invariant_belong0 self
  val invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant0 self }
    
  predicate reach_refl0 [#"../../../../../../src/union_find.rs" 85 4 85 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 86 8 90 9] forall i : int . in_range0 self i  -> reach0 self i i 0
  val reach_refl0 [#"../../../../../../src/union_find.rs" 85 4 85 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = reach_refl0 self }
    
  axiom reach_refl0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 84 14 84 28] reach_refl0 self = true
  use CreusotSandbox_UnionFind_UnionFind_Type as CreusotSandbox_UnionFind_UnionFind_Type
  function shallow_model0 [#"../../../../../../src/union_find.rs" 15 4 15 50] (self : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../src/union_find.rs" 17 12 19 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (shallow_model1 (CreusotSandbox_UnionFind_UnionFind_Type.unionfind_parent self))
  val shallow_model0 [#"../../../../../../src/union_find.rs" 15 4 15 50] (self : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = shallow_model0 self }
    
  predicate from_iter_post0 (prod : Seq.seq usize) (res : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 258 20 258 32] prod = shallow_model1 res
  val from_iter_post0 (prod : Seq.seq usize) (res : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = from_iter_post0 prod res }
    
  predicate resolve1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = resolve1 self }
    
  predicate completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve1 self /\ deep_model0 (Core_Ops_Range_Range_Type.range_start ( * self)) >= deep_model0 (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = completed0 self }
    
  predicate resolve0 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve0 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = resolve0 self }
    
  val collect0 (self : Core_Ops_Range_Range_Type.t_range usize) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    requires {inv0 self}
    ensures { [#"../../../../../../../../../creusot/creusot-contracts/src/std/iter.rs" 130 16 131 83] exists prod : Seq.seq usize . exists done' : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv1 prod /\ inv2 done' /\ resolve0 ( ^ done') /\ completed0 done' /\ produces0 self prod ( * done') /\ from_iter_post0 prod result }
    ensures { inv3 result }
    
  let rec cfg new [#"../../../../../../src/union_find.rs" 268 4 268 37] [@cfg:stackify] [@cfg:subregion_analysis] (n : usize) : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind
    ensures { [#"../../../../../../src/union_find.rs" 266 14 266 35] invariant0 (shallow_model0 result) }
    ensures { [#"../../../../../../src/union_find.rs" 267 4 267 81] forall i : int . in_range0 (shallow_model0 result) i
     -> belong0 (shallow_model0 result) i i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind;
  var n : usize = n;
  var uf : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind;
  var _5 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _6 : Core_Ops_Range_Range_Type.t_range usize;
  {
    goto BB0
  }
  BB0 {
    [#"../../../../../../src/union_find.rs" 270 20 270 26] _6 <- Core_Ops_Range_Range_Type.C_Range ([#"../../../../../../src/union_find.rs" 270 21 270 22] (0 : usize)) n;
    [#"../../../../../../src/union_find.rs" 270 20 270 36] _5 <- ([#"../../../../../../src/union_find.rs" 270 20 270 36] collect0 _6);
    _6 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB1
  }
  BB1 {
    [#"../../../../../../src/union_find.rs" 269 17 271 9] uf <- CreusotSandbox_UnionFind_UnionFind_Type.C_UnionFind _5;
    _5 <- any Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
    goto BB2
  }
  BB2 {
    assert { [@expl:assertion] [#"../../../../../../src/union_find.rs" 272 22 272 40] reach_refl0 (shallow_model0 uf) };
    goto BB3
  }
  BB3 {
    assert { [@expl:assertion] [#"../../../../../../src/union_find.rs" 273 8 273 79] forall i : int . in_range0 (shallow_model0 uf) i
     -> is_root0 (shallow_model0 uf) i };
    goto BB4
  }
  BB4 {
    assert { [@expl:assertion] [#"../../../../../../src/union_find.rs" 275 22 275 46] invariant_belong0 (shallow_model0 uf) };
    goto BB5
  }
  BB5 {
    [#"../../../../../../src/union_find.rs" 276 8 276 10] _0 <- uf;
    uf <- any CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind;
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type t_manuallydrop 't =
    | C_ManuallyDrop 't
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type as Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use prelude.UIntSize
  use prelude.Int
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_intoiter 't 'a =
    | C_IntoIter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotSandbox_UnionFind_Impl2_Update
  use prelude.UIntSize
  use seq.Seq
  predicate invariant5 (self : Seq.seq usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : Seq.seq usize) : bool
    ensures { result = invariant5 self }
    
  predicate inv4 (_x : Seq.seq usize)
  val inv4 (_x : Seq.seq usize) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Seq.seq usize . inv4 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv3 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv3 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv3 _x }
    
  function shallow_model5 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  val shallow_model5 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] inv3 self}
    ensures { result = shallow_model5 self }
    
  axiom shallow_model5_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] inv3 self)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] inv4 (shallow_model5 self)) && ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model5 self) <= UIntSize.to_int max0)
  predicate invariant4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 60 20 60 41] inv4 (shallow_model5 self)
  val invariant4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant4 self }
    
  axiom inv3 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv3 x = true
  use prelude.Borrow
  predicate invariant3 (self : borrowed usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : borrowed usize) : bool
    ensures { result = invariant3 self }
    
  predicate inv2 (_x : borrowed usize)
  val inv2 (_x : borrowed usize) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed usize . inv2 x = true
  predicate invariant2 (self : usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : usize) : bool
    ensures { result = invariant2 self }
    
  predicate inv1 (_x : usize)
  val inv1 (_x : usize) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : usize . inv1 x = true
  predicate invariant1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant1 self }
    
  predicate inv0 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  val inv0 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv0 x = true
  use seq.Seq
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  predicate reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  axiom reach0_def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach0 self src dst len = ([#"../../../../../../src/union_find.rs" 51 8 59 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach0 self (parent0 self src) dst (len - 1)
  )
  val reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach0 self src dst len }
    
  predicate in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 32 20 32 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range0 self i }
    
  predicate is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 45 20 45 59] in_range0 self i /\ parent0 self i = i
  val is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = is_root0 self i }
    
  predicate belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int)
    
   =
    [#"../../../../../../src/union_find.rs" 95 8 98 9] is_root0 self root /\ (exists len : int . reach0 self i root len)
  val belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int) : bool
    ensures { result = belong0 self i root }
    
  predicate invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 111 8 113 9] forall i : int . in_range0 self i
     -> (exists root : int . belong0 self i root)
  val invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_belong0 self }
    
  predicate invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 37 8 40 9] forall i : int . in_range0 self i
     -> in_range0 self (parent0 self i)
  val invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_range0 self }
    
  predicate invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 118 8 118 57] invariant_range0 self /\ invariant_belong0 self
  val invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant0 self }
    
  function equal0 [#"../../../../../../src/union_find.rs" 138 4 138 42] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (another : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    
   =
    [#"../../../../../../src/union_find.rs" 139 8 143 9] invariant0 self /\ invariant0 another /\ (forall i : int . in_range0 self i = in_range0 another i /\ (forall g : int . forall i : int . in_range0 self i
     -> belong0 self i g = belong0 another i g))
  val equal0 [#"../../../../../../src/union_find.rs" 138 4 138 42] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (another : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = equal0 self another }
    
  use seq.Seq
  function update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../src/union_find.rs" 149 12 151 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (Seq.set (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) (UIntSize.to_int i) r)
  val update0 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = update0 self i r }
    
  use CreusotSandbox_UnionFind_UnionFind_Type as CreusotSandbox_UnionFind_UnionFind_Type
  function shallow_model3 [#"../../../../../../src/union_find.rs" 15 4 15 50] (self : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../src/union_find.rs" 17 12 19 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (shallow_model5 (CreusotSandbox_UnionFind_UnionFind_Type.unionfind_parent self))
  val shallow_model3 [#"../../../../../../src/union_find.rs" 15 4 15 50] (self : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = shallow_model3 self }
    
  use prelude.Snapshot
  function lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 70 4 70 12] ()
  val lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_iff0 self }
    
  axiom lemma_reach_iff0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 71 4 75 16] forall len : int . forall dst : int . forall src : int . reach0 self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ reach0 self (parent0 self src) dst (len - 1))
  function lemma_belong_unique0 [#"../../../../../../src/union_find.rs" 105 4 105 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 106 8 106 30] let _ = lemma_reach_iff0 self in ()
  val lemma_belong_unique0 [#"../../../../../../src/union_find.rs" 105 4 105 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_belong_unique0 self }
    
  axiom lemma_belong_unique0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 102 4 104 16] forall r2 : int . forall r1 : int . forall i : int . belong0 self i r1
   -> belong0 self i r2  -> r1 = r2
  function lemma_reach_nonneg0 [#"../../../../../../src/union_find.rs" 81 4 81 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 78 4 78 12] ()
  val lemma_reach_nonneg0 [#"../../../../../../src/union_find.rs" 81 4 81 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_nonneg0 self }
    
  axiom lemma_reach_nonneg0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 79 4 80 54] forall len : int . forall dst : int . forall src : int . reach0 self src dst len
   -> 0 <= len
  function lemma_reach_intro0 [#"../../../../../../src/union_find.rs" 68 4 68 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 62 4 62 12] ()
  val lemma_reach_intro0 [#"../../../../../../src/union_find.rs" 68 4 68 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_intro0 self }
    
  axiom lemma_reach_intro0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 64 8 66 97] (forall src : int . reach0 self src src 0) /\ (forall len : int . forall dst : int . forall src : int . src <> dst
   -> reach0 self (parent0 self src) dst len  -> reach0 self src dst (len + 1))
  function lemma_reachable_trans0 [#"../../../../../../src/union_find.rs" 180 4 180 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 181 8 181 32] let _ = lemma_reach_intro0 self in let _ = lemma_reach_iff0 self in let _ = lemma_reach_nonneg0 self in ()
  val lemma_reachable_trans0 [#"../../../../../../src/union_find.rs" 180 4 180 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    requires {[#"../../../../../../src/union_find.rs" 175 16 175 32] invariant0 self}
    ensures { result = lemma_reachable_trans0 self }
    
  axiom lemma_reachable_trans0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . ([#"../../../../../../src/union_find.rs" 175 16 175 32] invariant0 self)
   -> ([#"../../../../../../src/union_find.rs" 176 4 179 54] forall k : int . forall j : int . forall i : int . (exists n : int . reach0 self i j n)
   -> (exists n : int . reach0 self j k n)  -> (exists n : int . reach0 self i k n))
  function lemma_update_in_range0 [#"../../../../../../src/union_find.rs" 171 4 171 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 167 4 167 12] ()
  val lemma_update_in_range0 [#"../../../../../../src/union_find.rs" 171 4 171 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_in_range0 self }
    
  axiom lemma_update_in_range0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 168 4 170 82] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 (update0 self i r) j = in_range0 self j
  function lemma_update_parent_ne0 [#"../../../../../../src/union_find.rs" 165 4 165 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 160 4 160 12] ()
  val lemma_update_parent_ne0 [#"../../../../../../src/union_find.rs" 165 4 165 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_parent_ne0 self }
    
  axiom lemma_update_parent_ne0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 161 4 164 57] forall j : int . forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> in_range0 self j  -> UIntSize.to_int i <> j  -> parent0 (update0 self i r) j = parent0 self j
  function lemma_update_parent_eq0 [#"../../../../../../src/union_find.rs" 158 4 158 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 155 4 155 12] ()
  val lemma_update_parent_eq0 [#"../../../../../../src/union_find.rs" 158 4 158 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_parent_eq0 self }
    
  axiom lemma_update_parent_eq0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 156 4 157 97] forall r : usize . forall i : usize . in_range0 self (UIntSize.to_int i)
   -> parent0 (update0 self i r) (UIntSize.to_int i) = UIntSize.to_int r
  function lemma_update_belong_preserved0 [#"../../../../../../src/union_find.rs" 213 4 213 63] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 214 8 214 37] let _ = lemma_update_parent_eq0 self in let _ = lemma_update_parent_ne0 self in let _ = lemma_update_in_range0 self in let _ = lemma_reach_intro0 self in let _ = lemma_reach_iff0 self in let _ = lemma_reach_nonneg0 self in ()
  val lemma_update_belong_preserved0 [#"../../../../../../src/union_find.rs" 213 4 213 63] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../../../../../src/union_find.rs" 205 16 205 32] invariant0 self}
    requires {[#"../../../../../../src/union_find.rs" 206 16 206 33] in_range0 self (UIntSize.to_int i)}
    requires {[#"../../../../../../src/union_find.rs" 207 16 207 33] in_range0 self (UIntSize.to_int r)}
    requires {[#"../../../../../../src/union_find.rs" 208 16 208 32] is_root0 self (UIntSize.to_int r)}
    ensures { result = lemma_update_belong_preserved0 self i r }
    
  axiom lemma_update_belong_preserved0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../../../../../src/union_find.rs" 205 16 205 32] invariant0 self)
   -> ([#"../../../../../../src/union_find.rs" 206 16 206 33] in_range0 self (UIntSize.to_int i))
   -> ([#"../../../../../../src/union_find.rs" 207 16 207 33] in_range0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 208 16 208 32] is_root0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 209 4 212 68] forall g : int . forall j : int . in_range0 self j
   -> not (exists n : int . reach0 self j (UIntSize.to_int i) n)  -> belong0 (update0 self i r) j g = belong0 self j g)
  function lemma_update_belong_updated0 [#"../../../../../../src/union_find.rs" 194 4 194 61] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 195 8 195 37] let _ = lemma_update_parent_eq0 self in let _ = lemma_update_parent_ne0 self in let _ = lemma_update_in_range0 self in let _ = lemma_reach_intro0 self in let _ = lemma_reach_iff0 self in let _ = lemma_reach_nonneg0 self in ()
  val lemma_update_belong_updated0 [#"../../../../../../src/union_find.rs" 194 4 194 61] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../../../../../src/union_find.rs" 188 16 188 32] invariant0 self}
    requires {[#"../../../../../../src/union_find.rs" 189 16 189 33] in_range0 self (UIntSize.to_int i)}
    requires {[#"../../../../../../src/union_find.rs" 190 16 190 33] in_range0 self (UIntSize.to_int r)}
    requires {[#"../../../../../../src/union_find.rs" 191 16 191 32] is_root0 self (UIntSize.to_int r)}
    ensures { result = lemma_update_belong_updated0 self i r }
    
  axiom lemma_update_belong_updated0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../../../../../src/union_find.rs" 188 16 188 32] invariant0 self)
   -> ([#"../../../../../../src/union_find.rs" 189 16 189 33] in_range0 self (UIntSize.to_int i))
   -> ([#"../../../../../../src/union_find.rs" 190 16 190 33] in_range0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 191 16 191 32] is_root0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 192 4 193 94] forall n : int . forall j : int . in_range0 self j
   -> reach0 self j (UIntSize.to_int i) n  -> belong0 (update0 self i r) j (UIntSize.to_int r))
  function lemma_update_belong_unify0 [#"../../../../../../src/union_find.rs" 257 4 257 59] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 258 8 258 46] let _ = lemma_update_belong_updated0 self i r in let _ = lemma_update_belong_preserved0 self i r in let _ = lemma_reachable_trans0 self in let _ = lemma_belong_unique0 self in ()
  val lemma_update_belong_unify0 [#"../../../../../../src/union_find.rs" 257 4 257 59] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../../../../../src/union_find.rs" 243 16 243 32] invariant0 self}
    requires {[#"../../../../../../src/union_find.rs" 244 16 244 33] in_range0 self (UIntSize.to_int i)}
    requires {[#"../../../../../../src/union_find.rs" 245 16 245 33] in_range0 self (UIntSize.to_int r)}
    requires {[#"../../../../../../src/union_find.rs" 246 16 246 32] is_root0 self (UIntSize.to_int r)}
    ensures { result = lemma_update_belong_unify0 self i r }
    
  axiom lemma_update_belong_unify0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../../../../../src/union_find.rs" 243 16 243 32] invariant0 self)
   -> ([#"../../../../../../src/union_find.rs" 244 16 244 33] in_range0 self (UIntSize.to_int i))
   -> ([#"../../../../../../src/union_find.rs" 245 16 245 33] in_range0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 246 16 246 32] is_root0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 256 15 256 44] invariant0 (update0 self i r)) && ([#"../../../../../../src/union_find.rs" 247 4 255 15] is_root0 self (UIntSize.to_int i)
   -> (forall g : int . forall j : int . in_range0 self j
   -> belong0 (update0 self i r) j g = (if belong0 self j (UIntSize.to_int i) then
    g = UIntSize.to_int r
  else
    belong0 self j g
  )))
  use prelude.Snapshot
  function lemma_update_belong_shortcut0 [#"../../../../../../src/union_find.rs" 235 4 235 62] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 236 8 236 46] let _ = lemma_update_belong_updated0 self i r in let _ = lemma_update_belong_preserved0 self i r in let _ = lemma_reachable_trans0 self in let _ = lemma_belong_unique0 self in ()
  val lemma_update_belong_shortcut0 [#"../../../../../../src/union_find.rs" 235 4 235 62] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../../../../../src/union_find.rs" 224 16 224 32] invariant0 self}
    requires {[#"../../../../../../src/union_find.rs" 225 16 225 33] in_range0 self (UIntSize.to_int i)}
    requires {[#"../../../../../../src/union_find.rs" 226 16 226 33] in_range0 self (UIntSize.to_int r)}
    requires {[#"../../../../../../src/union_find.rs" 227 16 227 32] is_root0 self (UIntSize.to_int r)}
    ensures { result = lemma_update_belong_shortcut0 self i r }
    
  axiom lemma_update_belong_shortcut0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../../../../../src/union_find.rs" 224 16 224 32] invariant0 self)
   -> ([#"../../../../../../src/union_find.rs" 225 16 225 33] in_range0 self (UIntSize.to_int i))
   -> ([#"../../../../../../src/union_find.rs" 226 16 226 33] in_range0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 227 16 227 32] is_root0 self (UIntSize.to_int r))
   -> ([#"../../../../../../src/union_find.rs" 234 15 234 44] invariant0 (update0 self i r)) && ([#"../../../../../../src/union_find.rs" 233 4 233 70] belong0 self (UIntSize.to_int i) (UIntSize.to_int r)
   -> equal0 (update0 self i r) self) && ([#"../../../../../../src/union_find.rs" 228 4 232 68] belong0 self (UIntSize.to_int i) (UIntSize.to_int r)
   -> (forall g : int . forall j : int . in_range0 self j  -> belong0 (update0 self i r) j g = belong0 self j g))
  use seq.Seq
  function shallow_model0 (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/model.rs" 97 8 97 31] shallow_model3 ( * self)
  val shallow_model0 (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = shallow_model0 self }
    
  function shallow_model6 (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/model.rs" 79 8 79 31] shallow_model0 self
  val shallow_model6 (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = shallow_model6 self }
    
  use prelude.Snapshot
  function shallow_model2 (self : Snapshot.snap_ty (borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind))) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/snapshot.rs" 27 20 27 48] shallow_model6 (Snapshot.inner self)
  val shallow_model2 (self : Snapshot.snap_ty (borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind))) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = shallow_model2 self }
    
  predicate resolve1 (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed usize) : bool
    ensures { result = resolve0 self }
    
  use prelude.Slice
  predicate resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) : bool
    ensures { result = resolve_elswhere0 self old' fin }
    
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/model.rs" 97 8 97 31] shallow_model5 ( * self)
  val shallow_model4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    ensures { result = shallow_model4 self }
    
  val index_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (index : usize) : borrowed usize
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds0 index (shallow_model4 self)}
    requires {inv0 self}
    requires {inv1 index}
    ensures { [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value0 index (shallow_model4 self) ( * result) }
    ensures { [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value0 index (shallow_model5 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere0 index (shallow_model4 self) (shallow_model5 ( ^ self)) }
    ensures { [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model5 ( ^ self)) = Seq.length (shallow_model4 self) }
    ensures { inv2 result }
    
  use prelude.Snapshot
  let rec cfg update [#"../../../../../../src/union_find.rs" 356 4 356 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) (i : usize) (r : usize) : ()
    requires {[#"../../../../../../src/union_find.rs" 339 4 339 34] invariant0 (shallow_model0 self)}
    requires {[#"../../../../../../src/union_find.rs" 340 4 340 35] in_range0 (shallow_model0 self) (UIntSize.to_int i)}
    requires {[#"../../../../../../src/union_find.rs" 341 4 341 35] in_range0 (shallow_model0 self) (UIntSize.to_int r)}
    requires {[#"../../../../../../src/union_find.rs" 342 4 342 34] is_root0 (shallow_model0 self) (UIntSize.to_int r)}
    ensures { [#"../../../../../../src/union_find.rs" 343 14 343 44] shallow_model3 ( ^ self) = update0 (shallow_model0 self) i r }
    ensures { [#"../../../../../../src/union_find.rs" 344 4 344 36] invariant0 (shallow_model3 ( ^ self)) }
    ensures { [#"../../../../../../src/union_find.rs" 345 4 345 76] forall j : int . in_range0 (shallow_model3 ( ^ self)) j = in_range0 (shallow_model0 self) j }
    ensures { [#"../../../../../../src/union_find.rs" 346 4 346 62] belong0 (shallow_model0 self) (UIntSize.to_int i) (UIntSize.to_int r)
     -> equal0 (shallow_model3 ( ^ self)) (shallow_model0 self) }
    ensures { [#"../../../../../../src/union_find.rs" 347 4 355 15] is_root0 (shallow_model0 self) (UIntSize.to_int i)
     -> (forall g : int . forall j : int . in_range0 (shallow_model0 self) j
     -> belong0 (shallow_model3 ( ^ self)) j g = (if belong0 (shallow_model0 self) j (UIntSize.to_int i) then
      g = UIntSize.to_int r
    else
      belong0 (shallow_model0 self) j g
    )) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) = self;
  var i : usize = i;
  var r : usize = r;
  var _old : Snapshot.snap_ty (borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind));
  var _16 : borrowed usize;
  var _17 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _25 : Snapshot.snap_ty ();
  var _27 : Snapshot.snap_ty ();
  {
    goto BB0
  }
  BB0 {
    [#"../../../../../../src/union_find.rs" 357 40 357 58] _old <- ([#"../../../../../../src/union_find.rs" 357 40 357 58] Snapshot.new self);
    goto BB1
  }
  BB1 {
    [#"../../../../../../src/union_find.rs" 358 8 358 19] _17 <- Borrow.borrow_final (CreusotSandbox_UnionFind_UnionFind_Type.unionfind_parent ( * self)) (Borrow.inherit_id (Borrow.get_id self) 1);
    [#"../../../../../../src/union_find.rs" 358 8 358 19] self <- { self with current = (let CreusotSandbox_UnionFind_UnionFind_Type.C_UnionFind x0 =  * self in CreusotSandbox_UnionFind_UnionFind_Type.C_UnionFind ( ^ _17)) ; };
    [#"../../../../../../src/union_find.rs" 358 19 358 22] _16 <- ([#"../../../../../../src/union_find.rs" 358 19 358 22] index_mut0 _17 i);
    _17 <- any borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
    goto BB2
  }
  BB2 {
    [#"../../../../../../src/union_find.rs" 358 8 358 26] _16 <- { _16 with current = r ; };
    assume { resolve0 _16 };
    assume { resolve1 self };
    assert { [@expl:assertion] [#"../../../../../../src/union_find.rs" 359 22 359 45] Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent (shallow_model0 self)) (UIntSize.to_int i) = r };
    assert { [@expl:assertion] [#"../../../../../../src/union_find.rs" 360 8 360 69] Seq.(==) (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent (shallow_model0 self)) (Seq.set (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent (shallow_model2 _old)) (UIntSize.to_int i) r) };
    assert { [@expl:assertion] [#"../../../../../../src/union_find.rs" 362 8 362 79] forall i : int . in_range0 (shallow_model0 self) i = in_range0 (shallow_model2 _old) i };
    [#"../../../../../../src/union_find.rs" 363 30 363 100] _25 <- ([#"../../../../../../src/union_find.rs" 363 30 363 100] Snapshot.new (lemma_update_belong_shortcut0 (shallow_model2 _old) i r));
    goto BB3
  }
  BB3 {
    [#"../../../../../../src/union_find.rs" 364 30 364 97] _27 <- ([#"../../../../../../src/union_find.rs" 364 30 364 97] Snapshot.new (lemma_update_belong_unify0 (shallow_model2 _old) i r));
    goto BB4
  }
  BB4 {
    assert { [@expl:assertion] [#"../../../../../../src/union_find.rs" 365 8 368 81] belong0 (shallow_model2 _old) (UIntSize.to_int i) (UIntSize.to_int r)
     -> (forall j : int . in_range0 (shallow_model2 _old) j
     -> belong0 (shallow_model0 self) j (UIntSize.to_int r) = belong0 (shallow_model2 _old) j (UIntSize.to_int r)) };
    [#"../../../../../../src/union_find.rs" 356 45 369 5] _0 <- ([#"../../../../../../src/union_find.rs" 356 45 369 5] ());
    return _0
  }
  
end
module CreusotSandbox_UnionFind_Impl2_Find
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Borrow
  predicate invariant9 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant9 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant9 self }
    
  predicate inv8 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  val inv8 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv8 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant8 (self : Core_Option_Option_Type.t_option usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : Core_Option_Option_Type.t_option usize) : bool
    ensures { result = invariant8 self }
    
  predicate inv7 (_x : Core_Option_Option_Type.t_option usize)
  val inv7 (_x : Core_Option_Option_Type.t_option usize) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Core_Option_Option_Type.t_option usize . inv7 x = true
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate invariant7 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant7 self }
    
  predicate inv6 (_x : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)))
  val inv6 (_x : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) . inv6 x = true
  predicate invariant6 (self : usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : usize) : bool
    ensures { result = invariant6 self }
    
  predicate inv5 (_x : usize)
  val inv5 (_x : usize) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : usize . inv5 x = true
  predicate invariant5 (self : usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : usize) : bool
    ensures { result = invariant5 self }
    
  predicate inv4 (_x : usize)
  val inv4 (_x : usize) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : usize . inv4 x = true
  predicate invariant4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant4 self }
    
  predicate inv3 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv3 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv3 x = true
  use seq.Seq
  predicate invariant3 (self : Seq.seq usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Seq.seq usize) : bool
    ensures { result = invariant3 self }
    
  predicate inv2 (_x : Seq.seq usize)
  val inv2 (_x : Seq.seq usize) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Seq.seq usize . inv2 x = true
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv1 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv1 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv1 _x }
    
  function shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  val shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] inv1 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] inv1 self)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] inv2 (shallow_model2 self)) && ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model2 self) <= UIntSize.to_int max0)
  predicate invariant2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 60 20 60 41] inv2 (shallow_model2 self)
  val invariant2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant2 self }
    
  axiom inv1 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv1 x = true
  use seq.Seq
  predicate inv0 (_x : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  function shallow_model7 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    
  val shallow_model7 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    ensures { result = shallow_model7 self }
    
  predicate produces0 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) (visited : Seq.seq usize) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 237 12 237 41] shallow_model7 self = Seq.(++) visited (shallow_model7 rhs)
  val produces0 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) (visited : Seq.seq usize) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = produces0 self visited rhs }
    
  function produces_trans0 (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) (ab : Seq.seq usize) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) (bc : Seq.seq usize) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) : ()
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 246 4 246 10] ()
  val produces_trans0 (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) (ab : Seq.seq usize) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) (bc : Seq.seq usize) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) : ()
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 248 15 248 32] produces0 a ab b}
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 249 15 249 32] produces0 b bc c}
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 251 22 251 23] inv0 a}
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 251 31 251 33] inv2 ab}
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 251 43 251 44] inv0 b}
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 251 52 251 54] inv2 bc}
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 251 64 251 65] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global), ab : Seq.seq usize, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global), bc : Seq.seq usize, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 248 15 248 32] produces0 a ab b)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 249 15 249 32] produces0 b bc c)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 251 22 251 23] inv0 a)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 251 31 251 33] inv2 ab)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 251 43 251 44] inv0 b)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 251 52 251 54] inv2 bc)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 251 64 251 65] inv0 c)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 250 14 250 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) : ()
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 241 4 241 10] ()
  val produces_refl0 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) : ()
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 244 21 244 25] inv0 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 244 21 244 25] inv0 self)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 243 14 243 45] produces0 self (Seq.empty ) self)
  predicate invariant1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant1 self }
    
  axiom inv0 : forall x : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use CreusotSandbox_UnionFind_UnionFind_Type as CreusotSandbox_UnionFind_UnionFind_Type
  function shallow_model5 [#"../../../../../../src/union_find.rs" 15 4 15 50] (self : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../src/union_find.rs" 17 12 19 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (shallow_model2 (CreusotSandbox_UnionFind_UnionFind_Type.unionfind_parent self))
  val shallow_model5 [#"../../../../../../src/union_find.rs" 15 4 15 50] (self : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = shallow_model5 self }
    
  use prelude.Snapshot
  use seq.Seq
  function shallow_model9 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/model.rs" 97 8 97 31] shallow_model2 ( * self)
  val shallow_model9 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    ensures { result = shallow_model9 self }
    
  val push0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (value : usize) : ()
    requires {inv8 self}
    requires {inv4 value}
    ensures { [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 78 26 78 51] shallow_model2 ( ^ self) = Seq.snoc (shallow_model9 self) value }
    
  predicate resolve2 (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve2 (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve3 (self : usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve3 (self : usize) : bool
    ensures { result = resolve3 self }
    
  use seq.Seq
  predicate resolve1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 222 8 222 85] forall i : int . 0 <= i /\ i < Seq.length (shallow_model7 self)
     -> resolve3 (Seq.get (shallow_model7 self) i)
  val resolve1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve1 self }
    
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  predicate reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  axiom reach0_def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach0 self src dst len = ([#"../../../../../../src/union_find.rs" 51 8 59 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach0 self (parent0 self src) dst (len - 1)
  )
  val reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach0 self src dst len }
    
  predicate in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 32 20 32 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range0 self i }
    
  predicate is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 45 20 45 59] in_range0 self i /\ parent0 self i = i
  val is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = is_root0 self i }
    
  predicate belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int)
    
   =
    [#"../../../../../../src/union_find.rs" 95 8 98 9] is_root0 self root /\ (exists len : int . reach0 self i root len)
  val belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int) : bool
    ensures { result = belong0 self i root }
    
  predicate invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 111 8 113 9] forall i : int . in_range0 self i
     -> (exists root : int . belong0 self i root)
  val invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_belong0 self }
    
  predicate invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 37 8 40 9] forall i : int . in_range0 self i
     -> in_range0 self (parent0 self i)
  val invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_range0 self }
    
  predicate invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 118 8 118 57] invariant_range0 self /\ invariant_belong0 self
  val invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant0 self }
    
  function equal0 [#"../../../../../../src/union_find.rs" 138 4 138 42] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (another : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    
   =
    [#"../../../../../../src/union_find.rs" 139 8 143 9] invariant0 self /\ invariant0 another /\ (forall i : int . in_range0 self i = in_range0 another i /\ (forall g : int . forall i : int . in_range0 self i
     -> belong0 self i g = belong0 another i g))
  val equal0 [#"../../../../../../src/union_find.rs" 138 4 138 42] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (another : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = equal0 self another }
    
  use seq.Seq
  function update1 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../src/union_find.rs" 149 12 151 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (Seq.set (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) (UIntSize.to_int i) r)
  val update1 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = update1 self i r }
    
  function shallow_model0 (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/model.rs" 97 8 97 31] shallow_model5 ( * self)
  val shallow_model0 (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = shallow_model0 self }
    
  val update0 [#"../../../../../../src/union_find.rs" 356 4 356 44] (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) (i : usize) (r : usize) : ()
    requires {[#"../../../../../../src/union_find.rs" 339 4 339 34] invariant0 (shallow_model0 self)}
    requires {[#"../../../../../../src/union_find.rs" 340 4 340 35] in_range0 (shallow_model0 self) (UIntSize.to_int i)}
    requires {[#"../../../../../../src/union_find.rs" 341 4 341 35] in_range0 (shallow_model0 self) (UIntSize.to_int r)}
    requires {[#"../../../../../../src/union_find.rs" 342 4 342 34] is_root0 (shallow_model0 self) (UIntSize.to_int r)}
    ensures { [#"../../../../../../src/union_find.rs" 343 14 343 44] shallow_model5 ( ^ self) = update1 (shallow_model0 self) i r }
    ensures { [#"../../../../../../src/union_find.rs" 344 4 344 36] invariant0 (shallow_model5 ( ^ self)) }
    ensures { [#"../../../../../../src/union_find.rs" 345 4 345 76] forall j : int . in_range0 (shallow_model5 ( ^ self)) j = in_range0 (shallow_model0 self) j }
    ensures { [#"../../../../../../src/union_find.rs" 346 4 346 62] belong0 (shallow_model0 self) (UIntSize.to_int i) (UIntSize.to_int r)
     -> equal0 (shallow_model5 ( ^ self)) (shallow_model0 self) }
    ensures { [#"../../../../../../src/union_find.rs" 347 4 355 15] is_root0 (shallow_model0 self) (UIntSize.to_int i)
     -> (forall g : int . forall j : int . in_range0 (shallow_model0 self) j
     -> belong0 (shallow_model5 ( ^ self)) j g = (if belong0 (shallow_model0 self) j (UIntSize.to_int i) then
      g = UIntSize.to_int r
    else
      belong0 (shallow_model0 self) j g
    )) }
    
  use prelude.Snapshot
  function shallow_model6 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize =
    [#"../../../../../../../../../creusot/creusot-contracts/src/model.rs" 79 8 79 31] shallow_model2 self
  val shallow_model6 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    ensures { result = shallow_model6 self }
    
  use prelude.Snapshot
  function shallow_model4 (self : Snapshot.snap_ty (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/snapshot.rs" 27 20 27 48] shallow_model6 (Snapshot.inner self)
  val shallow_model4 (self : Snapshot.snap_ty (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    ensures { result = shallow_model4 self }
    
  use seq.Seq
  predicate resolve0 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve0 self }
    
  function shallow_model10 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/model.rs" 97 8 97 31] shallow_model7 ( * self)
  val shallow_model10 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    ensures { result = shallow_model10 self }
    
  predicate completed0 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 230 20 230 57] resolve0 self /\ shallow_model10 self = Seq.empty 
  val completed0 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global))) : Core_Option_Option_Type.t_option usize
    requires {inv6 self}
    ensures { [#"../../../../../../../../../creusot/creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv7 result }
    
  function shallow_model8 (self : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/model.rs" 79 8 79 31] shallow_model5 self
  val shallow_model8 (self : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = shallow_model8 self }
    
  use prelude.Snapshot
  function shallow_model3 (self : Snapshot.snap_ty (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/snapshot.rs" 27 20 27 48] shallow_model8 (Snapshot.inner self)
  val shallow_model3 (self : Snapshot.snap_ty (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = shallow_model3 self }
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post0 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 174 20 174 33] shallow_model2 self = shallow_model7 res
  val into_iter_post0 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 168 20 168 24] true
  val into_iter_pre0 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = into_iter_pre0 self }
    
  val into_iter0 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre0 self}
    requires {inv1 self}
    ensures { [#"../../../../../../../../../creusot/creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post0 self result }
    ensures { inv0 result }
    
  function root_belong_refl0 [#"../../../../../../src/union_find.rs" 131 4 131 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    
   =
    [#"../../../../../../src/union_find.rs" 132 8 134 9] forall i : int . is_root0 self i  -> belong0 self i i
  val root_belong_refl0 [#"../../../../../../src/union_find.rs" 131 4 131 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = root_belong_refl0 self }
    
  axiom root_belong_refl0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 130 14 130 28] root_belong_refl0 self = true
  use prelude.Snapshot
  function lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 70 4 70 12] ()
  val lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_iff0 self }
    
  axiom lemma_reach_iff0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 71 4 75 16] forall len : int . forall dst : int . forall src : int . reach0 self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ reach0 self (parent0 self src) dst (len - 1))
  function lemma_belong_unique0 [#"../../../../../../src/union_find.rs" 105 4 105 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 106 8 106 30] let _ = lemma_reach_iff0 self in ()
  val lemma_belong_unique0 [#"../../../../../../src/union_find.rs" 105 4 105 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_belong_unique0 self }
    
  axiom lemma_belong_unique0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 102 4 104 16] forall r2 : int . forall r1 : int . forall i : int . belong0 self i r1
   -> belong0 self i r2  -> r1 = r2
  use prelude.Snapshot
  use prelude.Slice
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) : bool
    ensures { result = in_bounds0 self seq }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (index : usize) : usize
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model6 self)}
    requires {inv3 self}
    requires {inv4 index}
    ensures { [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model6 self) result }
    ensures { inv5 result }
    
  predicate contains0 (self : Seq.seq usize) (e : usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/logic/seq.rs" 129 8 129 78] exists i : int . 0 <= i /\ i < Seq.length self /\ Seq.get self i = e
  val contains0 (self : Seq.seq usize) (e : usize) : bool
    ensures { result = contains0 self e }
    
  val new1 (_1 : ()) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 68 26 68 44] Seq.length (shallow_model2 result) = 0 }
    ensures { inv1 result }
    
  use prelude.Snapshot
  let rec cfg find [#"../../../../../../src/union_find.rs" 284 4 284 45] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) (x : usize) : usize
    requires {[#"../../../../../../src/union_find.rs" 279 4 279 34] invariant0 (shallow_model0 self)}
    requires {[#"../../../../../../src/union_find.rs" 281 4 281 35] in_range0 (shallow_model0 self) (UIntSize.to_int x)}
    ensures { [#"../../../../../../src/union_find.rs" 280 4 280 36] invariant0 (shallow_model5 ( ^ self)) }
    ensures { [#"../../../../../../src/union_find.rs" 282 4 282 41] belong0 (shallow_model0 self) (UIntSize.to_int x) (UIntSize.to_int result) }
    ensures { [#"../../../../../../src/union_find.rs" 283 4 283 37] equal0 (shallow_model5 ( ^ self)) (shallow_model0 self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) = self;
  var x : usize = x;
  var _old : Snapshot.snap_ty (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
  var r : usize;
  var path : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _17 : ();
  var _18 : bool;
  var _20 : usize;
  var _24 : ();
  var _25 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _28 : usize;
  var _path_ghost : Snapshot.snap_ty (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _36 : Snapshot.snap_ty ();
  var iter : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global);
  var iter_old : Snapshot.snap_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global));
  var produced : Snapshot.snap_ty (Seq.seq usize);
  var _52 : Core_Option_Option_Type.t_option usize;
  var _53 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global));
  var _54 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global));
  var __creusot_proc_iter_elem : usize;
  var _57 : Snapshot.snap_ty (Seq.seq usize);
  var j : usize;
  var _62 : ();
  var _63 : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
  {
    goto BB0
  }
  BB0 {
    [#"../../../../../../src/union_find.rs" 285 40 285 59] _old <- ([#"../../../../../../src/union_find.rs" 285 40 285 59] Snapshot.new ( * self));
    goto BB1
  }
  BB1 {
    [#"../../../../../../src/union_find.rs" 286 20 286 21] r <- x;
    [#"../../../../../../src/union_find.rs" 287 35 287 45] path <- ([#"../../../../../../src/union_find.rs" 287 35 287 45] new1 ([#"../../../../../../src/union_find.rs" 287 35 287 45] ()));
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant { [#"../../../../../../src/union_find.rs" 288 8 289 65] forall g : int . belong0 (shallow_model0 self) (UIntSize.to_int r) g
     -> belong0 (shallow_model0 self) (UIntSize.to_int x) g };
    invariant { [#"../../../../../../src/union_find.rs" 288 8 289 65] in_range0 (shallow_model0 self) (UIntSize.to_int r) };
    invariant { [#"../../../../../../src/union_find.rs" 288 8 289 65] forall g : int . forall j : usize . contains0 (shallow_model2 path) j
     -> belong0 (shallow_model0 self) (UIntSize.to_int j) g  -> belong0 (shallow_model0 self) (UIntSize.to_int x) g };
    invariant { [#"../../../../../../src/union_find.rs" 288 8 289 65] forall j : usize . contains0 (shallow_model2 path) j
     -> in_range0 (shallow_model0 self) (UIntSize.to_int j) };
    goto BB6
  }
  BB6 {
    [#"../../../../../../src/union_find.rs" 296 25 296 28] _20 <- ([#"../../../../../../src/union_find.rs" 296 25 296 28] index0 (CreusotSandbox_UnionFind_UnionFind_Type.unionfind_parent ( * self)) r);
    goto BB7
  }
  BB7 {
    [#"../../../../../../src/union_find.rs" 296 14 296 33] _18 <- _20 <> r;
    switch (_18)
      | False -> goto BB11
      | True -> goto BB8
      end
  }
  BB8 {
    [#"../../../../../../src/union_find.rs" 297 12 297 16] _25 <- Borrow.borrow_mut path;
    [#"../../../../../../src/union_find.rs" 297 12 297 16] path <-  ^ _25;
    [#"../../../../../../src/union_find.rs" 297 12 297 24] _24 <- ([#"../../../../../../src/union_find.rs" 297 12 297 24] push0 _25 r);
    _25 <- any borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
    goto BB9
  }
  BB9 {
    [#"../../../../../../src/union_find.rs" 298 27 298 30] _28 <- ([#"../../../../../../src/union_find.rs" 298 27 298 30] index0 (CreusotSandbox_UnionFind_UnionFind_Type.unionfind_parent ( * self)) r);
    goto BB10
  }
  BB10 {
    [#"../../../../../../src/union_find.rs" 298 12 298 30] r <- _28;
    [#"../../../../../../src/union_find.rs" 296 34 299 9] _17 <- ([#"../../../../../../src/union_find.rs" 296 34 299 9] ());
    goto BB5
  }
  BB11 {
    [#"../../../../../../src/union_find.rs" 301 48 301 66] _path_ghost <- ([#"../../../../../../src/union_find.rs" 301 48 301 66] Snapshot.new path);
    goto BB12
  }
  BB12 {
    [#"../../../../../../src/union_find.rs" 302 31 302 86] _36 <- ([#"../../../../../../src/union_find.rs" 302 31 302 86] Snapshot.new (lemma_belong_unique0 (shallow_model0 self)));
    goto BB13
  }
  BB13 {
    assert { [@expl:assertion] [#"../../../../../../src/union_find.rs" 303 8 303 49] root_belong_refl0 (shallow_model0 self) };
    [#"../../../../../../src/union_find.rs" 304 8 304 48] iter <- ([#"../../../../../../src/union_find.rs" 304 8 304 48] into_iter0 path);
    path <- any Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
    goto BB14
  }
  BB14 {
    [#"../../../../../../src/union_find.rs" 304 8 304 48] iter_old <- ([#"../../../../../../src/union_find.rs" 304 8 304 48] Snapshot.new iter);
    goto BB15
  }
  BB15 {
    [#"../../../../../../src/union_find.rs" 304 8 304 48] produced <- ([#"../../../../../../src/union_find.rs" 304 8 304 48] Snapshot.new (Seq.empty ));
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    invariant { [#"../../../../../../src/union_find.rs" 304 8 304 48] inv0 iter };
    invariant { [#"../../../../../../src/union_find.rs" 304 8 304 48] produces0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter };
    invariant { [#"../../../../../../src/union_find.rs" 304 8 304 48] invariant0 (shallow_model0 self) };
    invariant { [#"../../../../../../src/union_find.rs" 304 8 304 48] equal0 (shallow_model0 self) (shallow_model3 _old) };
    invariant { [#"../../../../../../src/union_find.rs" 304 8 304 48] is_root0 (shallow_model0 self) (UIntSize.to_int r) };
    goto BB20
  }
  BB20 {
    [#"../../../../../../src/union_find.rs" 304 8 304 48] _54 <- Borrow.borrow_mut iter;
    [#"../../../../../../src/union_find.rs" 304 8 304 48] iter <-  ^ _54;
    [#"../../../../../../src/union_find.rs" 304 8 304 48] _53 <- Borrow.borrow_final ( * _54) (Borrow.get_id _54);
    [#"../../../../../../src/union_find.rs" 304 8 304 48] _54 <- { _54 with current = ( ^ _53) ; };
    [#"../../../../../../src/union_find.rs" 304 8 304 48] _52 <- ([#"../../../../../../src/union_find.rs" 304 8 304 48] next0 _53);
    _53 <- any borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global));
    goto BB21
  }
  BB21 {
    assume { resolve0 _54 };
    switch (_52)
      | Core_Option_Option_Type.C_None -> goto BB22
      | Core_Option_Option_Type.C_Some _ -> goto BB23
      end
  }
  BB22 {
    assume { resolve1 iter };
    assume { resolve2 self };
    goto BB28
  }
  BB23 {
    goto BB25
  }
  BB24 {
    assume { resolve1 iter };
    assume { resolve2 self };
    assert { [#"../../../../../../src/union_find.rs" 304 8 304 48] false };
    absurd
  }
  BB25 {
    [#"../../../../../../../../../creusot/creusot-contracts-proc/src/lib.rs" 654 0 654 51] __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _52;
    [#"../../../../../../src/union_find.rs" 304 8 304 48] _57 <- ([#"../../../../../../src/union_find.rs" 304 8 304 48] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB26
  }
  BB26 {
    [#"../../../../../../src/union_find.rs" 304 8 304 48] produced <- _57;
    _57 <- any Snapshot.snap_ty (Seq.seq usize);
    [#"../../../../../../../../../creusot/creusot-contracts-proc/src/lib.rs" 654 0 654 51] j <- __creusot_proc_iter_elem;
    assert { [@expl:assertion] [#"../../../../../../src/union_find.rs" 308 26 308 63] j = Seq.get (shallow_model4 _path_ghost) (Seq.length (Snapshot.inner produced) - 1) };
    [#"../../../../../../src/union_find.rs" 309 12 309 16] _63 <- Borrow.borrow_mut ( * self);
    [#"../../../../../../src/union_find.rs" 309 12 309 16] self <- { self with current = ( ^ _63) ; };
    [#"../../../../../../src/union_find.rs" 309 12 309 29] _62 <- ([#"../../../../../../src/union_find.rs" 309 12 309 29] update0 _63 j r);
    _63 <- any borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
    goto BB27
  }
  BB27 {
    [#"../../../../../../src/union_find.rs" 307 22 310 9] _17 <- ([#"../../../../../../src/union_find.rs" 307 22 310 9] ());
    goto BB19
  }
  BB28 {
    [#"../../../../../../src/union_find.rs" 311 8 311 9] _0 <- r;
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
module CreusotSandbox_UnionFind_Impl2_Unify
  use prelude.UIntSize
  use seq.Seq
  predicate invariant2 (self : Seq.seq usize) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Seq.seq usize) : bool
    ensures { result = invariant2 self }
    
  predicate inv1 (_x : Seq.seq usize)
  val inv1 (_x : Seq.seq usize) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq usize . inv1 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    requires {[#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] inv0 self}
    ensures { result = shallow_model3 self }
    
  axiom shallow_model3_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] inv0 self)
   -> ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] inv1 (shallow_model3 self)) && ([#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model3 self) <= UIntSize.to_int max0)
  predicate invariant1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/std/vec.rs" 60 20 60 41] inv1 (shallow_model3 self)
  val invariant1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant1 self }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  use seq.Seq
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use prelude.Borrow
  function parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../../../../../src/union_find.rs" 27 8 27 39] UIntSize.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent0 [#"../../../../../../src/union_find.rs" 26 4 26 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent0 self i }
    
  predicate reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  axiom reach0_def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach0 self src dst len = ([#"../../../../../../src/union_find.rs" 51 8 59 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach0 self (parent0 self src) dst (len - 1)
  )
  val reach0 [#"../../../../../../src/union_find.rs" 50 4 50 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach0 self src dst len }
    
  predicate in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 32 20 32 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range0 [#"../../../../../../src/union_find.rs" 31 4 31 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range0 self i }
    
  predicate is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../../../../../src/union_find.rs" 45 20 45 59] in_range0 self i /\ parent0 self i = i
  val is_root0 [#"../../../../../../src/union_find.rs" 44 4 44 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = is_root0 self i }
    
  predicate belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int)
    
   =
    [#"../../../../../../src/union_find.rs" 95 8 98 9] is_root0 self root /\ (exists len : int . reach0 self i root len)
  val belong0 [#"../../../../../../src/union_find.rs" 94 4 94 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int) : bool
    ensures { result = belong0 self i root }
    
  predicate invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 111 8 113 9] forall i : int . in_range0 self i
     -> (exists root : int . belong0 self i root)
  val invariant_belong0 [#"../../../../../../src/union_find.rs" 110 4 110 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_belong0 self }
    
  predicate invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 37 8 40 9] forall i : int . in_range0 self i
     -> in_range0 self (parent0 self i)
  val invariant_range0 [#"../../../../../../src/union_find.rs" 36 4 36 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_range0 self }
    
  predicate invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../../../../../src/union_find.rs" 118 8 118 57] invariant_range0 self /\ invariant_belong0 self
  val invariant0 [#"../../../../../../src/union_find.rs" 117 4 117 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant0 self }
    
  function equal0 [#"../../../../../../src/union_find.rs" 138 4 138 42] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (another : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    
   =
    [#"../../../../../../src/union_find.rs" 139 8 143 9] invariant0 self /\ invariant0 another /\ (forall i : int . in_range0 self i = in_range0 another i /\ (forall g : int . forall i : int . in_range0 self i
     -> belong0 self i g = belong0 another i g))
  val equal0 [#"../../../../../../src/union_find.rs" 138 4 138 42] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (another : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = equal0 self another }
    
  predicate same_set0 [#"../../../../../../src/union_find.rs" 122 4 122 46] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (j : int)
    
   =
    [#"../../../../../../src/union_find.rs" 123 8 126 9] in_range0 self i /\ in_range0 self j /\ (exists root : int . belong0 self i root /\ belong0 self j root)
  val same_set0 [#"../../../../../../src/union_find.rs" 122 4 122 46] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (j : int) : bool
    ensures { result = same_set0 self i j }
    
  use CreusotSandbox_UnionFind_UnionFind_Type as CreusotSandbox_UnionFind_UnionFind_Type
  function shallow_model2 [#"../../../../../../src/union_find.rs" 15 4 15 50] (self : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../src/union_find.rs" 17 12 19 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (shallow_model3 (CreusotSandbox_UnionFind_UnionFind_Type.unionfind_parent self))
  val shallow_model2 [#"../../../../../../src/union_find.rs" 15 4 15 50] (self : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = shallow_model2 self }
    
  use prelude.Snapshot
  predicate resolve0 (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) =
    [#"../../../../../../../../../creusot/creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) : bool
    ensures { result = resolve0 self }
    
  use seq.Seq
  function update1 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../src/union_find.rs" 149 12 151 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (Seq.set (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) (UIntSize.to_int i) r)
  val update1 [#"../../../../../../src/union_find.rs" 147 4 147 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = update1 self i r }
    
  function shallow_model0 (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../../../../../../../../creusot/creusot-contracts/src/model.rs" 97 8 97 31] shallow_model2 ( * self)
  val shallow_model0 (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = shallow_model0 self }
    
  val update0 [#"../../../../../../src/union_find.rs" 356 4 356 44] (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) (i : usize) (r : usize) : ()
    requires {[#"../../../../../../src/union_find.rs" 339 4 339 34] invariant0 (shallow_model0 self)}
    requires {[#"../../../../../../src/union_find.rs" 340 4 340 35] in_range0 (shallow_model0 self) (UIntSize.to_int i)}
    requires {[#"../../../../../../src/union_find.rs" 341 4 341 35] in_range0 (shallow_model0 self) (UIntSize.to_int r)}
    requires {[#"../../../../../../src/union_find.rs" 342 4 342 34] is_root0 (shallow_model0 self) (UIntSize.to_int r)}
    ensures { [#"../../../../../../src/union_find.rs" 343 14 343 44] shallow_model2 ( ^ self) = update1 (shallow_model0 self) i r }
    ensures { [#"../../../../../../src/union_find.rs" 344 4 344 36] invariant0 (shallow_model2 ( ^ self)) }
    ensures { [#"../../../../../../src/union_find.rs" 345 4 345 76] forall j : int . in_range0 (shallow_model2 ( ^ self)) j = in_range0 (shallow_model0 self) j }
    ensures { [#"../../../../../../src/union_find.rs" 346 4 346 62] belong0 (shallow_model0 self) (UIntSize.to_int i) (UIntSize.to_int r)
     -> equal0 (shallow_model2 ( ^ self)) (shallow_model0 self) }
    ensures { [#"../../../../../../src/union_find.rs" 347 4 355 15] is_root0 (shallow_model0 self) (UIntSize.to_int i)
     -> (forall g : int . forall j : int . in_range0 (shallow_model0 self) j
     -> belong0 (shallow_model2 ( ^ self)) j g = (if belong0 (shallow_model0 self) j (UIntSize.to_int i) then
      g = UIntSize.to_int r
    else
      belong0 (shallow_model0 self) j g
    )) }
    
  val find0 [#"../../../../../../src/union_find.rs" 284 4 284 45] (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) (x : usize) : usize
    requires {[#"../../../../../../src/union_find.rs" 279 4 279 34] invariant0 (shallow_model0 self)}
    requires {[#"../../../../../../src/union_find.rs" 281 4 281 35] in_range0 (shallow_model0 self) (UIntSize.to_int x)}
    ensures { [#"../../../../../../src/union_find.rs" 280 4 280 36] invariant0 (shallow_model2 ( ^ self)) }
    ensures { [#"../../../../../../src/union_find.rs" 282 4 282 41] belong0 (shallow_model0 self) (UIntSize.to_int x) (UIntSize.to_int result) }
    ensures { [#"../../../../../../src/union_find.rs" 283 4 283 37] equal0 (shallow_model2 ( ^ self)) (shallow_model0 self) }
    
  use prelude.Snapshot
  function lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 70 4 70 12] ()
  val lemma_reach_iff0 [#"../../../../../../src/union_find.rs" 76 4 76 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_iff0 self }
    
  axiom lemma_reach_iff0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 71 4 75 16] forall len : int . forall dst : int . forall src : int . reach0 self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ reach0 self (parent0 self src) dst (len - 1))
  function lemma_belong_unique0 [#"../../../../../../src/union_find.rs" 105 4 105 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../../../../../src/union_find.rs" 106 8 106 30] let _ = lemma_reach_iff0 self in ()
  val lemma_belong_unique0 [#"../../../../../../src/union_find.rs" 105 4 105 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_belong_unique0 self }
    
  axiom lemma_belong_unique0_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../../../../../src/union_find.rs" 102 4 104 16] forall r2 : int . forall r1 : int . forall i : int . belong0 self i r1
   -> belong0 self i r2  -> r1 = r2
  let rec cfg unify [#"../../../../../../src/union_find.rs" 327 4 327 55] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) (x : usize) (y : usize) : bool
    requires {[#"../../../../../../src/union_find.rs" 315 4 315 34] invariant0 (shallow_model0 self)}
    requires {[#"../../../../../../src/union_find.rs" 317 4 317 35] in_range0 (shallow_model0 self) (UIntSize.to_int x)}
    requires {[#"../../../../../../src/union_find.rs" 318 4 318 35] in_range0 (shallow_model0 self) (UIntSize.to_int y)}
    ensures { [#"../../../../../../src/union_find.rs" 316 4 316 36] invariant0 (shallow_model2 ( ^ self)) }
    ensures { [#"../../../../../../src/union_find.rs" 319 4 324 16] forall j : int . forall i : int . same_set0 (shallow_model2 ( ^ self)) i j = (same_set0 (shallow_model0 self) i j \/ same_set0 (shallow_model0 self) i (UIntSize.to_int x) /\ same_set0 (shallow_model0 self) j (UIntSize.to_int y) \/ same_set0 (shallow_model0 self) i (UIntSize.to_int y) /\ same_set0 (shallow_model0 self) j (UIntSize.to_int x)) }
    ensures { [#"../../../../../../src/union_find.rs" 325 14 325 47] result = (not same_set0 (shallow_model0 self) (UIntSize.to_int x) (UIntSize.to_int y)) }
    ensures { [#"../../../../../../src/union_find.rs" 326 14 326 46] result = (not equal0 (shallow_model2 ( ^ self)) (shallow_model0 self)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) = self;
  var x : usize = x;
  var y : usize = y;
  var _11 : Snapshot.snap_ty ();
  var rx : usize;
  var _14 : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
  var ry : usize;
  var _17 : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
  var _19 : bool;
  var _22 : ();
  var _23 : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
  {
    goto BB0
  }
  BB0 {
    [#"../../../../../../src/union_find.rs" 328 31 328 86] _11 <- ([#"../../../../../../src/union_find.rs" 328 31 328 86] Snapshot.new (lemma_belong_unique0 (shallow_model0 self)));
    goto BB1
  }
  BB1 {
    [#"../../../../../../src/union_find.rs" 329 17 329 21] _14 <- Borrow.borrow_mut ( * self);
    [#"../../../../../../src/union_find.rs" 329 17 329 21] self <- { self with current = ( ^ _14) ; };
    [#"../../../../../../src/union_find.rs" 329 17 329 29] rx <- ([#"../../../../../../src/union_find.rs" 329 17 329 29] find0 _14 x);
    _14 <- any borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
    goto BB2
  }
  BB2 {
    [#"../../../../../../src/union_find.rs" 330 17 330 21] _17 <- Borrow.borrow_mut ( * self);
    [#"../../../../../../src/union_find.rs" 330 17 330 21] self <- { self with current = ( ^ _17) ; };
    [#"../../../../../../src/union_find.rs" 330 17 330 29] ry <- ([#"../../../../../../src/union_find.rs" 330 17 330 29] find0 _17 y);
    _17 <- any borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
    goto BB3
  }
  BB3 {
    [#"../../../../../../src/union_find.rs" 331 11 331 19] _19 <- rx = ry;
    switch (_19)
      | False -> goto BB5
      | True -> goto BB4
      end
  }
  BB4 {
    assume { resolve0 self };
    [#"../../../../../../src/union_find.rs" 332 12 332 17] _0 <- ([#"../../../../../../src/union_find.rs" 332 12 332 17] false);
    goto BB7
  }
  BB5 {
    [#"../../../../../../src/union_find.rs" 334 12 334 16] _23 <- Borrow.borrow_final ( * self) (Borrow.get_id self);
    [#"../../../../../../src/union_find.rs" 334 12 334 16] self <- { self with current = ( ^ _23) ; };
    [#"../../../../../../src/union_find.rs" 334 12 334 31] _22 <- ([#"../../../../../../src/union_find.rs" 334 12 334 31] update0 _23 rx ry);
    _23 <- any borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
    goto BB6
  }
  BB6 {
    assume { resolve0 self };
    [#"../../../../../../src/union_find.rs" 335 12 335 16] _0 <- ([#"../../../../../../src/union_find.rs" 335 12 335 16] true);
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module CreusotSandbox_UnionFind_Impl0
  
end
